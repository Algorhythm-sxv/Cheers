#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use crate::search::SEARCH_MAX_PLY;

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],
    pub knight_behind_pawn: EvalScore,
    pub knight_threats: [EvalScore; 6],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_pair: EvalScore,
    pub bishop_threats: [EvalScore; 6],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],
    pub rook_queen_file: EvalScore,
    pub rook_threats: [EvalScore; 6],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 5],
    pub pawn_backward: [EvalScore; 2],
    pub pawn_threats: [EvalScore; 6],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array.chunks_exact_mut(2).for_each(EvalScore::convert);
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],
    pub knight_beind_pawn: [i16; 2],
    pub knight_threats: [[i16; 2]; 6],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],
    pub bishop_beind_pawn: [i16; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_threats: [[i16; 2]; 6],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],
    pub rook_queen_file: [i16; 2],
    pub rook_threats: [[i16; 2]; 6],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 5],
    pub pawn_backward: [[i16; 2]; 2],
    pub pawn_threats: [[i16; 2]; 6],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub fn is_mate_score(score: i16) -> bool {
    score.abs().abs_diff(CHECKMATE_SCORE) <= SEARCH_MAX_PLY as u16
}

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(42, 110),
        s!(331, 201),
        s!(301, 221),
        s!(386, 373),
        s!(709, 706),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-119, -34),
        s!(-79, -18),
        s!(-64, -1),
        s!(-57, 10),
        s!(-51, 15),
        s!(-48, 22),
        s!(-42, 24),
        s!(-36, 26),
        s!(-28, 22),
    ],
    knight_outpost: [s!(-71, 3), s!(-69, 1), s!(-55, 16)],
    knight_behind_pawn: s!(3, 7),
    knight_threats: [
        s!(-3, 4),
        s!(0, 0),
        s!(13, 13),
        s!(34, -7),
        s!(17, -26),
        s!(74, -17),
    ],
    bishop_mobility: [
        s!(-75, -39),
        s!(-64, -22),
        s!(-51, -6),
        s!(-44, 6),
        s!(-38, 14),
        s!(-32, 20),
        s!(-28, 27),
        s!(-24, 30),
        s!(-22, 34),
        s!(-18, 35),
        s!(-14, 36),
        s!(-7, 34),
        s!(-3, 40),
        s!(4, 30),
    ],
    bishop_outpost: [s!(-92, -9), s!(-91, -7), s!(-68, -3)],
    bishop_behind_pawn: s!(7, 5),
    bishop_pair: s!(13, 40),
    bishop_threats: [
        s!(0, 9),
        s!(13, 15),
        s!(0, 0),
        s!(21, 0),
        s!(25, 27),
        s!(34, 15),
    ],
    rook_mobility: [
        s!(-152, -20),
        s!(-70, -30),
        s!(-48, -3),
        s!(-41, 11),
        s!(-40, 17),
        s!(-39, 19),
        s!(-40, 25),
        s!(-37, 28),
        s!(-34, 28),
        s!(-31, 31),
        s!(-30, 34),
        s!(-27, 36),
        s!(-25, 38),
        s!(-24, 37),
        s!(-22, 36),
    ],
    rook_on_open_file: [s!(-68, 11), s!(-57, 16), s!(-49, 17)],
    rook_queen_file: s!(2, 6),
    rook_threats: [
        s!(-6, 7),
        s!(0, 10),
        s!(5, 8),
        s!(0, 0),
        s!(29, -7),
        s!(131, -31),
    ],
    queen_mobility: [
        s!(-111, -109),
        s!(-112, -132),
        s!(-170, -131),
        s!(-116, -48),
        s!(-107, -18),
        s!(-105, 21),
        s!(-100, 24),
        s!(-99, 44),
        s!(-98, 55),
        s!(-97, 66),
        s!(-94, 69),
        s!(-92, 71),
        s!(-91, 77),
        s!(-89, 77),
        s!(-88, 80),
        s!(-87, 84),
        s!(-86, 88),
        s!(-86, 92),
        s!(-86, 96),
        s!(-84, 96),
        s!(-79, 95),
        s!(-75, 91),
        s!(-66, 90),
        s!(-60, 83),
        s!(-51, 84),
        s!(25, 39),
        s!(-53, 73),
        s!(356, -146),
    ],
    queen_discovery_risk: s!(-13, 17),
    king_on_open_file: [s!(17, 0), s!(1, 11), s!(-28, 5)],
    king_ring_attacks: [
        s!(44, -15),
        s!(41, -11),
        s!(29, -6),
        s!(10, -7),
        s!(-25, 2),
        s!(-69, 24),
        s!(-122, 47),
        s!(-163, 64),
        s!(-259, 119),
        s!(-480, 306),
        s!(-289, 265),
        s!(-217, -56),
        s!(-122, -119),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(1102, -704),
        s!(33, -13),
        s!(31, -10),
        s!(29, -9),
        s!(20, 0),
        s!(13, -1),
        s!(7, 0),
        s!(3, 1),
        s!(0, 0),
        s!(1, 0),
        s!(-3, 2),
        s!(-6, 1),
        s!(-12, 4),
        s!(-17, 4),
        s!(-26, 5),
        s!(-35, 5),
        s!(-42, 5),
        s!(-43, 3),
        s!(-47, 0),
        s!(-43, -3),
        s!(-48, -6),
        s!(-46, -9),
        s!(-58, -11),
        s!(-57, -14),
        s!(-42, -21),
        s!(-21, -24),
        s!(-85, -17),
    ],
    king_discovery_risk: s!(-19, 1),
    pawn_connected: [s!(-13, -6), s!(-1, 2), s!(10, 4)],
    pawn_phalanx: [s!(-1, 3), s!(4, 6), s!(4, 0)],
    pawn_isolated: [s!(3, 9), s!(2, 4)],
    pawn_doubled: [s!(2, -2), s!(0, 3), s!(-3, 0), s!(0, -12), s!(-235, 451)],
    pawn_backward: [s!(3, 14), s!(-1, 11)],
    pawn_threats: [
        s!(13, 0),
        s!(28, 1),
        s!(28, 21),
        s!(46, -10),
        s!(31, -29),
        s!(61, -12),
    ],
    passed_pawn_friendly_king_distance: [s!(-10, 16), s!(-14, 9), s!(-12, -3), s!(-2, -11)],
    passed_pawn_enemy_king_distance: [s!(-23, -21), s!(19, -4), s!(3, 11), s!(-2, 21)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(2, -4),
        s!(5, -6),
        s!(-2, -14),
        s!(7, -28),
        s!(15, -32),
        s!(6, -25),
        s!(13, -18),
        s!(10, -13),
        s!(7, -4),
        s!(1, 2),
        s!(-2, -7),
        s!(5, -22),
        s!(3, -17),
        s!(5, -13),
        s!(-2, 2),
        s!(16, -11),
        s!(8, 21),
        s!(6, 21),
        s!(-4, 12),
        s!(4, 0),
        s!(-2, 5),
        s!(8, 9),
        s!(1, 24),
        s!(4, 17),
        s!(20, 43),
        s!(11, 48),
        s!(14, 30),
        s!(3, 24),
        s!(0, 26),
        s!(10, 31),
        s!(-3, 49),
        s!(-1, 46),
        s!(22, 82),
        s!(32, 73),
        s!(3, 54),
        s!(11, 21),
        s!(-1, 35),
        s!(-4, 71),
        s!(2, 70),
        s!(-25, 92),
        s!(1, -14),
        s!(69, -4),
        s!(42, 13),
        s!(43, -25),
        s!(-6, 7),
        s!(5, 77),
        s!(37, 97),
        s!(65, 63),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-7, -67),
            s!(-3, -69),
            s!(-1, -64),
            s!(-3, -60),
            s!(0, -58),
            s!(14, -67),
            s!(12, -76),
            s!(0, -78),
            s!(-10, -70),
            s!(-9, -73),
            s!(-5, -71),
            s!(-3, -64),
            s!(0, -67),
            s!(0, -71),
            s!(3, -78),
            s!(0, -79),
            s!(-5, -68),
            s!(-5, -68),
            s!(1, -72),
            s!(5, -72),
            s!(7, -73),
            s!(10, -75),
            s!(1, -73),
            s!(1, -77),
            s!(-2, -56),
            s!(1, -62),
            s!(3, -63),
            s!(7, -66),
            s!(16, -69),
            s!(20, -71),
            s!(9, -66),
            s!(11, -69),
            s!(12, -43),
            s!(6, -30),
            s!(28, -33),
            s!(25, -23),
            s!(38, -37),
            s!(61, -58),
            s!(43, -37),
            s!(33, -52),
            s!(54, 83),
            s!(20, 57),
            s!(18, 49),
            s!(26, 60),
            s!(57, 32),
            s!(56, -27),
            s!(15, -25),
            s!(-49, 10),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-53, 16),
            s!(-28, 6),
            s!(-40, 13),
            s!(-30, 14),
            s!(-24, 14),
            s!(-30, 8),
            s!(-27, 11),
            s!(-35, 14),
            s!(-32, 13),
            s!(-27, 15),
            s!(-25, 13),
            s!(-16, 16),
            s!(-13, 13),
            s!(-20, 12),
            s!(-21, 12),
            s!(-19, 21),
            s!(-29, 11),
            s!(-21, 13),
            s!(-18, 15),
            s!(-18, 24),
            s!(-10, 23),
            s!(-9, 12),
            s!(-7, 11),
            s!(-12, 13),
            s!(-19, 19),
            s!(-13, 14),
            s!(-7, 24),
            s!(-2, 25),
            s!(0, 28),
            s!(1, 18),
            s!(3, 13),
            s!(-9, 17),
            s!(-16, 18),
            s!(-10, 17),
            s!(-2, 22),
            s!(15, 24),
            s!(5, 23),
            s!(16, 20),
            s!(-10, 20),
            s!(6, 11),
            s!(-22, 13),
            s!(-16, 16),
            s!(-6, 23),
            s!(-3, 23),
            s!(1, 20),
            s!(17, 9),
            s!(-12, 12),
            s!(-7, 7),
            s!(-30, 12),
            s!(-25, 19),
            s!(-21, 18),
            s!(-8, 17),
            s!(-12, 13),
            s!(9, 4),
            s!(-12, 13),
            s!(-13, 4),
            s!(-94, -8),
            s!(-89, 11),
            s!(-57, 18),
            s!(-36, 11),
            s!(-15, 13),
            s!(-42, -1),
            s!(-76, 11),
            s!(-68, -22),
        ],
        [
            s!(30, 3),
            s!(38, 9),
            s!(26, 4),
            s!(20, 8),
            s!(25, 6),
            s!(15, 14),
            s!(27, 4),
            s!(40, -7),
            s!(28, 12),
            s!(28, 0),
            s!(34, 0),
            s!(25, 8),
            s!(29, 8),
            s!(33, 3),
            s!(35, 3),
            s!(37, 2),
            s!(21, 10),
            s!(28, 9),
            s!(27, 8),
            s!(29, 11),
            s!(30, 13),
            s!(32, 8),
            s!(33, 5),
            s!(34, 6),
            s!(18, 8),
            s!(13, 12),
            s!(21, 11),
            s!(30, 9),
            s!(31, 8),
            s!(26, 8),
            s!(21, 10),
            s!(27, 5),
            s!(15, 9),
            s!(19, 12),
            s!(21, 8),
            s!(21, 15),
            s!(25, 8),
            s!(29, 9),
            s!(22, 11),
            s!(18, 10),
            s!(23, 12),
            s!(25, 5),
            s!(18, 8),
            s!(21, 5),
            s!(19, 7),
            s!(39, 8),
            s!(30, 6),
            s!(33, 13),
            s!(17, 1),
            s!(13, 5),
            s!(12, 4),
            s!(8, 6),
            s!(13, 2),
            s!(16, 2),
            s!(4, 6),
            s!(16, 1),
            s!(9, 11),
            s!(-8, 13),
            s!(-7, 10),
            s!(-28, 15),
            s!(-16, 12),
            s!(-9, 6),
            s!(6, 7),
            s!(-10, 5),
        ],
        [
            s!(-23, 14),
            s!(-24, 11),
            s!(-23, 15),
            s!(-20, 11),
            s!(-17, 6),
            s!(-25, 11),
            s!(-18, 5),
            s!(-21, 7),
            s!(-35, 10),
            s!(-31, 10),
            s!(-25, 10),
            s!(-24, 8),
            s!(-19, 3),
            s!(-20, 1),
            s!(-15, -2),
            s!(-28, 1),
            s!(-35, 14),
            s!(-31, 12),
            s!(-29, 10),
            s!(-28, 11),
            s!(-22, 7),
            s!(-17, 1),
            s!(-5, -5),
            s!(-15, -3),
            s!(-31, 16),
            s!(-33, 17),
            s!(-28, 15),
            s!(-23, 14),
            s!(-22, 12),
            s!(-26, 11),
            s!(-15, 5),
            s!(-21, 5),
            s!(-25, 18),
            s!(-15, 14),
            s!(-17, 18),
            s!(-13, 14),
            s!(-12, 7),
            s!(-3, 3),
            s!(-4, 6),
            s!(-6, 3),
            s!(-25, 17),
            s!(-7, 14),
            s!(-11, 15),
            s!(-10, 13),
            s!(6, 6),
            s!(12, 3),
            s!(29, 2),
            s!(8, 2),
            s!(-25, 20),
            s!(-23, 24),
            s!(-15, 26),
            s!(-4, 18),
            s!(-12, 19),
            s!(-2, 16),
            s!(1, 13),
            s!(2, 10),
            s!(-29, 24),
            s!(-35, 28),
            s!(-36, 33),
            s!(-42, 32),
            s!(-32, 27),
            s!(-16, 23),
            s!(-15, 24),
            s!(-10, 21),
        ],
        [
            s!(-25, -9),
            s!(-25, -8),
            s!(-23, -8),
            s!(-18, -3),
            s!(-19, -16),
            s!(-31, -15),
            s!(-28, -15),
            s!(-14, -27),
            s!(-20, -10),
            s!(-21, -10),
            s!(-16, -10),
            s!(-14, -5),
            s!(-14, -5),
            s!(-14, -20),
            s!(-11, -34),
            s!(-1, -39),
            s!(-20, -10),
            s!(-19, 1),
            s!(-22, 10),
            s!(-22, 11),
            s!(-20, 12),
            s!(-15, 7),
            s!(-10, 0),
            s!(-10, -5),
            s!(-16, -6),
            s!(-29, 19),
            s!(-26, 20),
            s!(-23, 28),
            s!(-23, 29),
            s!(-20, 22),
            s!(-14, 18),
            s!(-13, 15),
            s!(-27, 5),
            s!(-23, 12),
            s!(-28, 23),
            s!(-29, 37),
            s!(-29, 43),
            s!(-21, 33),
            s!(-15, 32),
            s!(-15, 21),
            s!(-22, 0),
            s!(-25, 8),
            s!(-27, 29),
            s!(-28, 39),
            s!(-23, 43),
            s!(-12, 35),
            s!(-7, 16),
            s!(-15, 20),
            s!(-26, 0),
            s!(-41, 19),
            s!(-43, 40),
            s!(-51, 55),
            s!(-57, 68),
            s!(-33, 38),
            s!(-32, 29),
            s!(-2, 19),
            s!(-46, 12),
            s!(-55, 26),
            s!(-41, 36),
            s!(-29, 31),
            s!(-39, 37),
            s!(-37, 34),
            s!(0, -2),
            s!(-34, 17),
        ],
        [
            s!(-14, -44),
            s!(14, -33),
            s!(2, -17),
            s!(-43, -3),
            s!(-10, -16),
            s!(-33, -8),
            s!(2, -26),
            s!(-13, -43),
            s!(1, -25),
            s!(0, -8),
            s!(-6, 0),
            s!(-24, 7),
            s!(-25, 9),
            s!(-16, 2),
            s!(4, -8),
            s!(-9, -18),
            s!(-36, -19),
            s!(-5, -3),
            s!(-25, 11),
            s!(-32, 19),
            s!(-29, 18),
            s!(-30, 12),
            s!(-19, 0),
            s!(-54, -6),
            s!(-52, -17),
            s!(-33, 2),
            s!(-39, 19),
            s!(-57, 34),
            s!(-57, 33),
            s!(-45, 20),
            s!(-54, 10),
            s!(-102, 2),
            s!(-47, -10),
            s!(-30, 10),
            s!(-41, 27),
            s!(-65, 41),
            s!(-63, 41),
            s!(-50, 32),
            s!(-56, 21),
            s!(-93, 6),
            s!(-76, 1),
            s!(15, 12),
            s!(-22, 29),
            s!(-27, 35),
            s!(-6, 35),
            s!(25, 30),
            s!(-4, 24),
            s!(-39, 4),
            s!(-64, -6),
            s!(-11, 12),
            s!(-24, 19),
            s!(44, 9),
            s!(2, 19),
            s!(-10, 28),
            s!(4, 20),
            s!(-30, 3),
            s!(8, -64),
            s!(4, -31),
            s!(22, -23),
            s!(-49, 4),
            s!(-22, -6),
            s!(-27, -4),
            s!(9, -12),
            s!(75, -78),
        ],
    ]),
};
