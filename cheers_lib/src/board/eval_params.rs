#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i32; 2]; 9],
    pub knight_behind_pawn: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outpost: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishop_behind_pawn: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outpost: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonal: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_file: [[i32; 2]; 2],
    pub rook_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risk: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],
    pub king_open_file: [[i32; 2]; 2],
    pub no_enemy_queen: [i32; 2],

    // passed pawn terms
    pub passed_pawn: [[i32; 2]; 8],
    pub passed_pawn_advanced: [[i32; 2]; 6],
    pub passed_pawn_unblocked: [i32; 2],
    pub passed_pawn_connected: [i32; 2],
    pub passed_pawn_friendly_rook: [i32; 2],
    pub passed_pawn_enemy_king_too_far: [i32; 2],

    pub double_pawn: [[i32; 2]; 8],
    pub isolated_pawn: [[i32; 2]; 8],
    pub connected_pawn: [[i32; 2]; 8],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<EvalParams, [i32; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i32; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i32; Self::LEN]>(self)
    }
    pub fn from_array(params: [i32; Self::LEN]) -> Self {
        bytemuck::cast::<[i32; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i32; 2],
    pub knight_count: [i32; 2],
    pub bishop_count: [i32; 2],
    pub rook_count: [i32; 2],
    pub queen_count: [i32; 2],
    // pads to the length of PieceValues
    pub king_count: [i32; 2],

    pub knight_mobility: [[i32; 2]; 9],
    pub knights_behind_pawns: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outposts: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishops_behind_pawns: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outposts: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonals: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_files: [[i32; 2]; 2],
    pub rooks_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risks: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],
    pub king_open_file: [[i32; 2]; 2],
    pub no_enemy_queen: [i32; 2],

    pub passed_pawn: [[i32; 2]; 8],
    pub passed_pawn_advanced: [[i32; 2]; 6],
    pub passed_pawn_unblocked: [i32; 2],
    pub passed_pawn_connected: [i32; 2],
    pub passed_pawn_friendly_rook: [i32; 2],
    pub passed_pawn_enemy_king_too_far: [i32; 2],

    pub double_pawn: [[i32; 2]; 8],
    pub isolated_pawn: [[i32; 2]; 8],
    pub connected_pawn: [[i32; 2]; 8],

    pub pawn_placement: [[i32; 2]; 64],
    pub knight_placement: [[i32; 2]; 64],
    pub bishop_placement: [[i32; 2]; 64],
    pub rook_placement: [[i32; 2]; 64],
    pub queen_placement: [[i32; 2]; 64],
    pub king_placement: [[i32; 2]; 64],

    pub turn: i32,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn new() -> Self {
        bytemuck::cast::<[i32; Self::LEN], Self>([0i32; Self::LEN])
    }
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<Self, [i32; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i32 = 200000;
pub const DRAW_SCORE: i32 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [39, 112],
        [250, 351],
        [272, 340],
        [376, 570],
        [444, 640],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-62, -191],
        [-62, -83],
        [-41, -22],
        [-34, 9],
        [-23, 25],
        [-18, 50],
        [-8, 47],
        [5, 53],
        [19, 37],
    ],
    knight_behind_pawn: [9, 2],
    knight_king_distance: [[-17, 5], [-9, -15], [-17, -5], [-31, -14]],
    knight_outpost: [[-1, -4], [4, 12]],
    bishop_mobility: [
        [-139, -39],
        [-60, -51],
        [-39, -38],
        [-34, -5],
        [-23, 1],
        [-13, 12],
        [-7, 27],
        [-1, 29],
        [-1, 36],
        [3, 31],
        [11, 38],
        [30, 15],
        [18, 18],
        [67, -11],
    ],
    bishop_behind_pawn: [11, 19],
    bishop_king_distance: [[-7, 1], [-14, -1], [-18, 5], [-31, 7]],
    bishop_outpost: [[-10, 0], [2, 3]],
    bishop_pair: [-3, 91],
    bishop_long_diagonal: [2, -3],
    rook_mobility: [
        [75, -175],
        [-110, -45],
        [-73, -5],
        [-69, 27],
        [-68, 29],
        [-66, 38],
        [-64, 48],
        [-60, 51],
        [-57, 55],
        [-53, 62],
        [-48, 69],
        [-48, 73],
        [-43, 68],
        [-44, 69],
        [-50, 75],
    ],
    rook_open_file: [[10, 16], [27, 15]],
    rook_on_seventh: [-9, 0],
    rook_trapped: [[-22, 2], [0, -45]],
    queen_mobility: [
        [-37, -1],
        [-245, -85],
        [-74, -155],
        [-49, -110],
        [-44, -199],
        [-43, -61],
        [-43, -22],
        [-47, 0],
        [-43, 20],
        [-44, 60],
        [-41, 66],
        [-35, 69],
        [-31, 74],
        [-27, 79],
        [-20, 71],
        [-20, 75],
        [-13, 74],
        [-17, 78],
        [-13, 66],
        [-4, 63],
        [0, 29],
        [31, 12],
        [66, -25],
        [49, -15],
        [49, -28],
        [58, -82],
        [39, -11],
        [40, -24],
    ],
    queen_discovery_risk: [-14, 11],
    king_mobility: [
        [-98, 29],
        [-4, -70],
        [-10, 33],
        [-9, 7],
        [20, 4],
        [19, -14],
        [20, 1],
        [2, 11],
        [23, -6],
    ],
    king_defenders: [
        [-49, -1],
        [-25, 3],
        [0, 0],
        [13, 1],
        [22, 2],
        [30, 0],
        [33, -15],
        [-194, -11],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    king_open_file: [[-21, 13], [-50, -6]],
    no_enemy_queen: [421, 333],
    passed_pawn: [
        [10, -10],
        [9, 0],
        [-2, 1],
        [0, -1],
        [-10, 7],
        [-26, 4],
        [-15, 18],
        [33, 1],
    ],
    passed_pawn_advanced: [[-12, -37], [-2, -28], [2, 3], [7, 12], [33, 0], [47, 30]],
    passed_pawn_unblocked: [-8, 43],
    passed_pawn_connected: [3, -13],
    passed_pawn_friendly_rook: [13, 25],
    passed_pawn_enemy_king_too_far: [-22, 49],
    double_pawn: [
        [-29, -76],
        [6, -17],
        [-16, -30],
        [-14, -43],
        [-20, -25],
        [-25, -19],
        [27, -33],
        [-10, -47],
    ],
    isolated_pawn: [
        [-10, -18],
        [-7, -6],
        [-16, -21],
        [-11, -18],
        [-23, -23],
        [-8, -16],
        [2, -22],
        [-20, -17],
    ],
    connected_pawn: [
        [0, 2],
        [7, 7],
        [12, 16],
        [5, 24],
        [8, 20],
        [0, 15],
        [12, 2],
        [9, 0],
    ],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-10, 34],
            [-11, 21],
            [2, 29],
            [17, 38],
            [8, 50],
            [19, 38],
            [5, 19],
            [-3, 0],
            [-26, 32],
            [-20, 28],
            [-20, 22],
            [0, 16],
            [1, 34],
            [-6, 29],
            [-10, 15],
            [-13, 3],
            [-10, 35],
            [-9, 27],
            [1, 9],
            [4, 6],
            [5, 12],
            [19, 13],
            [-13, 26],
            [2, 4],
            [-4, 62],
            [-7, 34],
            [0, 49],
            [8, 18],
            [14, 27],
            [33, 23],
            [4, 40],
            [18, 34],
            [11, 108],
            [0, 78],
            [55, 78],
            [53, 68],
            [53, 64],
            [27, 74],
            [62, 72],
            [33, 62],
            [76, 135],
            [58, 109],
            [90, 146],
            [25, 98],
            [81, 132],
            [26, 105],
            [-38, 132],
            [-61, 141],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-105, 33],
            [-19, -24],
            [-54, -22],
            [-32, -33],
            [-47, -2],
            [-47, -17],
            [-21, -16],
            [-28, 6],
            [-36, -10],
            [-49, 19],
            [-23, -33],
            [-24, -30],
            [-23, -42],
            [-32, -11],
            [-35, -10],
            [-30, -15],
            [-17, -14],
            [-30, -22],
            [-29, -35],
            [-16, -7],
            [-29, -9],
            [-34, -35],
            [-14, -35],
            [-22, -3],
            [5, 11],
            [0, -4],
            [0, 9],
            [-18, 26],
            [-6, 5],
            [4, -7],
            [28, -31],
            [-1, -9],
            [21, 1],
            [12, -20],
            [25, 6],
            [57, -6],
            [11, 9],
            [37, 4],
            [26, -22],
            [62, 13],
            [-46, 21],
            [12, -21],
            [46, 8],
            [54, -2],
            [93, -19],
            [110, -8],
            [58, -9],
            [67, -33],
            [52, 7],
            [28, -6],
            [69, -18],
            [85, -11],
            [92, -16],
            [101, -41],
            [52, 17],
            [85, 17],
            [-61, 77],
            [-55, 54],
            [-28, -4],
            [82, -33],
            [42, 14],
            [81, -5],
            [55, 9],
            [-32, -83],
        ],
        [
            [23, 13],
            [3, -12],
            [2, 6],
            [-14, -3],
            [-21, 6],
            [-17, -12],
            [-38, 20],
            [12, 20],
            [11, 1],
            [5, -18],
            [1, -8],
            [-19, 10],
            [-11, -3],
            [-5, -4],
            [-6, -5],
            [24, -20],
            [19, -1],
            [3, 0],
            [-17, 15],
            [-7, 2],
            [-14, 28],
            [-26, 2],
            [3, -13],
            [11, -20],
            [20, -1],
            [-12, -3],
            [-2, 10],
            [24, 7],
            [14, 7],
            [-5, 1],
            [1, -7],
            [16, -10],
            [28, -5],
            [20, 1],
            [7, 21],
            [41, 12],
            [19, 18],
            [14, -9],
            [8, -1],
            [10, 4],
            [23, 0],
            [29, 0],
            [40, -1],
            [48, -2],
            [67, -18],
            [84, 11],
            [71, -19],
            [42, 14],
            [20, 6],
            [32, -4],
            [28, -7],
            [39, -17],
            [32, 0],
            [36, -1],
            [10, 22],
            [28, -15],
            [10, 35],
            [-13, 6],
            [10, -2],
            [-149, 43],
            [-139, 27],
            [-78, 21],
            [26, -18],
            [-26, -14],
        ],
        [
            [-47, 23],
            [-46, 12],
            [-38, 18],
            [-31, 3],
            [-15, -15],
            [-16, -5],
            [0, -19],
            [-18, -7],
            [-60, 6],
            [-38, -5],
            [-31, -4],
            [-43, -1],
            [-13, -22],
            [-11, -31],
            [-7, -33],
            [-56, -2],
            [-66, 16],
            [-46, 17],
            [-56, 10],
            [-22, -9],
            [-18, -24],
            [-6, -26],
            [25, -36],
            [-23, 14],
            [-48, 34],
            [-64, 38],
            [-32, 9],
            [-18, 7],
            [-24, 8],
            [-36, 13],
            [50, -22],
            [-26, 23],
            [-40, 46],
            [-23, 35],
            [-22, 43],
            [-3, 23],
            [-6, 23],
            [19, 4],
            [52, 4],
            [-8, 46],
            [-45, 48],
            [-2, 46],
            [-14, 40],
            [-20, 41],
            [38, 8],
            [46, 9],
            [47, 5],
            [11, 41],
            [-19, 43],
            [-12, 46],
            [-7, 51],
            [41, 34],
            [34, 34],
            [19, 29],
            [38, 33],
            [20, 28],
            [0, 25],
            [-75, 66],
            [-7, 27],
            [-38, 50],
            [-29, 34],
            [-7, 41],
            [-31, 44],
            [-24, 52],
        ],
        [
            [-21, -21],
            [-27, -78],
            [-28, -22],
            [-21, -10],
            [-15, -40],
            [-46, -9],
            [68, -127],
            [41, -141],
            [-46, -13],
            [-25, -8],
            [-22, -11],
            [-12, -36],
            [-19, -20],
            [-2, -63],
            [4, -54],
            [26, -69],
            [-6, -60],
            [-22, -17],
            [-34, 45],
            [-30, 28],
            [-40, 43],
            [-19, 20],
            [-15, 17],
            [9, -3],
            [-16, -2],
            [-40, 2],
            [-24, 13],
            [-33, 94],
            [-23, 59],
            [-14, 37],
            [2, 11],
            [-3, 24],
            [-24, 2],
            [-12, 10],
            [-17, 29],
            [-32, 92],
            [-34, 95],
            [-8, 102],
            [11, 68],
            [5, 44],
            [-12, -11],
            [-21, 25],
            [-4, 27],
            [-36, 82],
            [31, 66],
            [91, 22],
            [54, 35],
            [38, 65],
            [-19, 6],
            [-39, 21],
            [-20, 55],
            [-47, 92],
            [-32, 93],
            [35, 42],
            [28, 14],
            [70, 57],
            [-7, -42],
            [15, -38],
            [24, 2],
            [3, 29],
            [53, 8],
            [184, -79],
            [63, -50],
            [75, -30],
        ],
        [
            [20, -77],
            [-7, -56],
            [-18, -29],
            [-60, -17],
            [-23, -51],
            [-59, -35],
            [0, -60],
            [36, -119],
            [-7, -21],
            [-67, -15],
            [-35, -20],
            [-89, -4],
            [-87, -6],
            [-84, -9],
            [-31, -32],
            [-22, -42],
            [1, -42],
            [-19, -5],
            [-76, 3],
            [-90, 15],
            [-87, 7],
            [-104, 0],
            [-80, -10],
            [-93, -24],
            [-7, -9],
            [0, -1],
            [-41, 29],
            [-64, 47],
            [-110, 35],
            [-117, 28],
            [-110, 16],
            [-54, -23],
            [129, -3],
            [41, 22],
            [-1, 59],
            [-33, 60],
            [-108, 67],
            [-34, 61],
            [-62, 39],
            [43, -3],
            [126, 0],
            [10, 54],
            [109, 58],
            [40, 61],
            [36, 70],
            [-71, 78],
            [-45, 50],
            [-28, 13],
            [44, -21],
            [149, 26],
            [105, 77],
            [90, 40],
            [-26, 77],
            [-74, 78],
            [-82, 78],
            [-91, 26],
            [164, -130],
            [168, -28],
            [125, 35],
            [71, 50],
            [36, 8],
            [114, 0],
            [177, 24],
            [83, -102],
        ],
    ]),
};
