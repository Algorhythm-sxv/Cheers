#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],
    pub knight_behind_pawn: EvalScore,
    pub knight_threats: [EvalScore; 6],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_pair: EvalScore,
    pub bishop_threats: [EvalScore; 6],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],
    pub rook_queen_file: EvalScore,
    pub rook_threats: [EvalScore; 6],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 5],
    pub pawn_backward: [EvalScore; 2],
    pub pawn_threats: [EvalScore; 6],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],
    pub knight_beind_pawn: [i16; 2],
    pub knight_threats: [[i16; 2]; 6],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],
    pub bishop_beind_pawn: [i16; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_threats: [[i16; 2]; 6],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],
    pub rook_queen_file: [i16; 2],
    pub rook_threats: [[i16; 2]; 6],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 5],
    pub pawn_backward: [[i16; 2]; 2],
    pub pawn_threats: [[i16; 2]; 6],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
    ()
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(41, 110),
        s!(343, 194),
        s!(310, 219),
        s!(402, 359),
        s!(743, 699),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-93, -64),
        s!(-68, -30),
        s!(-60, -6),
        s!(-54, 6),
        s!(-49, 11),
        s!(-45, 19),
        s!(-41, 21),
        s!(-36, 22),
        s!(-30, 17),
    ],
    knight_outpost: [s!(-64, 2), s!(-62, -2), s!(-52, 10)],
    knight_behind_pawn: s!(2, 8),
    knight_threats: [
        s!(-2, 6),
        s!(0, 0),
        s!(16, 15),
        s!(29, 0),
        s!(12, 0),
        s!(74, -17),
    ],
    bishop_mobility: [
        s!(-70, -49),
        s!(-62, -25),
        s!(-46, -8),
        s!(-39, 4),
        s!(-34, 12),
        s!(-31, 19),
        s!(-28, 26),
        s!(-25, 29),
        s!(-23, 32),
        s!(-20, 33),
        s!(-17, 34),
        s!(-12, 33),
        s!(0, 31),
        s!(-2, 32),
    ],
    bishop_outpost: [s!(-84, -9), s!(-83, -8), s!(-65, -5)],
    bishop_behind_pawn: s!(3, 5),
    bishop_pair: s!(16, 33),
    bishop_threats: [
        s!(0, 9),
        s!(10, 19),
        s!(0, 0),
        s!(20, 9),
        s!(16, 45),
        s!(34, 15),
    ],
    rook_mobility: [
        s!(-106, -56),
        s!(-68, -41),
        s!(-46, -8),
        s!(-42, 8),
        s!(-40, 15),
        s!(-38, 19),
        s!(-37, 25),
        s!(-34, 27),
        s!(-32, 28),
        s!(-29, 31),
        s!(-27, 34),
        s!(-23, 35),
        s!(-21, 36),
        s!(-19, 36),
        s!(-3, 25),
    ],
    rook_on_open_file: [s!(-64, 9), s!(-52, 11), s!(-47, 11)],
    rook_queen_file: s!(2, 8),
    rook_threats: [
        s!(-6, 11),
        s!(3, 12),
        s!(7, 10),
        s!(0, 0),
        s!(25, 7),
        s!(131, -31),
    ],
    queen_mobility: [
        s!(-147, -243),
        s!(-119, -260),
        s!(-142, -77),
        s!(-123, -26),
        s!(-106, -25),
        s!(-102, 12),
        s!(-98, 23),
        s!(-96, 39),
        s!(-94, 50),
        s!(-93, 62),
        s!(-91, 67),
        s!(-90, 68),
        s!(-88, 74),
        s!(-87, 75),
        s!(-86, 79),
        s!(-85, 82),
        s!(-85, 84),
        s!(-85, 86),
        s!(-85, 88),
        s!(-84, 89),
        s!(-81, 87),
        s!(-77, 81),
        s!(-67, 75),
        s!(-60, 64),
        s!(-63, 66),
        s!(-18, 39),
        s!(-77, 63),
        s!(236, -117),
    ],
    queen_discovery_risk: s!(-9, 10),
    king_on_open_file: [s!(13, 0), s!(2, 10), s!(-21, 4)],
    king_ring_attacks: [
        s!(31, -12),
        s!(30, -7),
        s!(20, -5),
        s!(4, -3),
        s!(-23, 5),
        s!(-53, 20),
        s!(-90, 35),
        s!(-131, 52),
        s!(-191, 89),
        s!(-357, 219),
        s!(-363, 295),
        s!(-208, -188),
        s!(-234, -230),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(927, -829),
        s!(22, -19),
        s!(22, -4),
        s!(20, -3),
        s!(12, 10),
        s!(6, 6),
        s!(2, 5),
        s!(0, 5),
        s!(0, 5),
        s!(0, 4),
        s!(-3, 6),
        s!(-5, 6),
        s!(-9, 7),
        s!(-15, 9),
        s!(-18, 8),
        s!(-24, 8),
        s!(-27, 6),
        s!(-25, 3),
        s!(-24, 0),
        s!(-19, -3),
        s!(-29, -7),
        s!(-20, -11),
        s!(-1, -22),
        s!(-22, -16),
        s!(21, -31),
        s!(-36, -29),
        s!(15, -39),
    ],
    king_discovery_risk: s!(-16, 0),
    pawn_connected: [s!(-9, -6), s!(0, 3), s!(6, 9)],
    pawn_phalanx: [s!(0, 1), s!(4, 5), s!(2, 2)],
    pawn_isolated: [s!(3, 9), s!(1, 3)],
    pawn_doubled: [s!(1, -2), s!(1, 3), s!(-4, 0), s!(-4, -17), s!(-182, 275)],
    pawn_backward: [s!(2, 13), s!(0, 11)],
    pawn_threats: [
        s!(-1, -3),
        s!(24, 12),
        s!(21, 28),
        s!(34, 4),
        s!(19, 0),
        s!(61, -12),
    ],
    passed_pawn_friendly_king_distance: [s!(-5, 12), s!(-12, 8), s!(-12, -3), s!(-5, -11)],
    passed_pawn_enemy_king_distance: [s!(-31, -23), s!(17, -5), s!(6, 9), s!(1, 20)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(2, -4),
        s!(0, 0),
        s!(-1, -15),
        s!(2, -21),
        s!(4, -23),
        s!(-1, -17),
        s!(2, -8),
        s!(4, -11),
        s!(5, -2),
        s!(-3, 6),
        s!(-5, -4),
        s!(-3, -16),
        s!(0, -16),
        s!(-8, -3),
        s!(-11, 9),
        s!(8, -7),
        s!(9, 20),
        s!(6, 24),
        s!(-8, 18),
        s!(-3, 7),
        s!(-6, 9),
        s!(-8, 18),
        s!(-2, 28),
        s!(8, 17),
        s!(15, 43),
        s!(12, 45),
        s!(5, 34),
        s!(-2, 29),
        s!(-2, 28),
        s!(0, 36),
        s!(-1, 50),
        s!(3, 44),
        s!(32, 71),
        s!(30, 62),
        s!(9, 50),
        s!(10, 31),
        s!(2, 34),
        s!(3, 61),
        s!(6, 64),
        s!(3, 73),
        s!(22, 3),
        s!(59, 33),
        s!(36, 29),
        s!(34, 7),
        s!(19, 7),
        s!(17, 71),
        s!(65, 103),
        s!(55, 74),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-11, -65),
            s!(-2, -67),
            s!(-2, -61),
            s!(-2, -58),
            s!(-4, -57),
            s!(14, -64),
            s!(11, -72),
            s!(-3, -73),
            s!(-9, -70),
            s!(-7, -72),
            s!(-5, -68),
            s!(-4, -63),
            s!(-3, -63),
            s!(1, -69),
            s!(7, -78),
            s!(-3, -75),
            s!(-5, -67),
            s!(-4, -68),
            s!(4, -72),
            s!(9, -72),
            s!(7, -70),
            s!(13, -73),
            s!(3, -71),
            s!(-1, -72),
            s!(0, -59),
            s!(3, -60),
            s!(5, -60),
            s!(13, -65),
            s!(13, -63),
            s!(21, -67),
            s!(8, -64),
            s!(3, -64),
            s!(5, -49),
            s!(14, -39),
            s!(21, -34),
            s!(28, -32),
            s!(32, -34),
            s!(49, -53),
            s!(30, -41),
            s!(20, -53),
            s!(38, 55),
            s!(22, 25),
            s!(20, 30),
            s!(33, 35),
            s!(36, 37),
            s!(36, -11),
            s!(-3, -31),
            s!(-17, -10),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-32, -9),
            s!(-28, -1),
            s!(-27, 3),
            s!(-27, 12),
            s!(-22, 12),
            s!(-29, 5),
            s!(-25, 1),
            s!(-29, -4),
            s!(-28, 6),
            s!(-24, 13),
            s!(-20, 4),
            s!(-17, 13),
            s!(-14, 10),
            s!(-17, 4),
            s!(-19, 10),
            s!(-19, 14),
            s!(-25, 1),
            s!(-20, 11),
            s!(-19, 14),
            s!(-14, 20),
            s!(-13, 19),
            s!(-11, 10),
            s!(-9, 8),
            s!(-17, 7),
            s!(-17, 16),
            s!(-11, 12),
            s!(-9, 23),
            s!(-4, 24),
            s!(-2, 25),
            s!(-1, 18),
            s!(-2, 12),
            s!(-7, 16),
            s!(-11, 17),
            s!(-8, 13),
            s!(-5, 22),
            s!(8, 24),
            s!(0, 27),
            s!(8, 20),
            s!(-3, 16),
            s!(2, 11),
            s!(-20, 9),
            s!(-10, 12),
            s!(-3, 22),
            s!(5, 19),
            s!(12, 17),
            s!(18, 12),
            s!(-5, 16),
            s!(-6, 6),
            s!(-25, 8),
            s!(-25, 17),
            s!(-13, 11),
            s!(1, 17),
            s!(-5, 17),
            s!(9, 3),
            s!(-11, 12),
            s!(-12, 5),
            s!(-102, -8),
            s!(-69, 16),
            s!(-54, 20),
            s!(-23, 10),
            s!(9, 5),
            s!(-82, 19),
            s!(-73, 20),
            s!(-64, -18),
        ],
        [
            s!(31, 1),
            s!(30, 6),
            s!(23, 1),
            s!(22, 5),
            s!(24, 3),
            s!(15, 9),
            s!(24, 2),
            s!(34, -2),
            s!(35, 5),
            s!(31, -2),
            s!(33, 0),
            s!(26, 4),
            s!(29, 3),
            s!(31, 0),
            s!(35, 0),
            s!(36, -2),
            s!(25, 7),
            s!(31, 6),
            s!(29, 7),
            s!(30, 8),
            s!(30, 10),
            s!(32, 4),
            s!(34, 1),
            s!(29, 6),
            s!(23, 4),
            s!(21, 8),
            s!(26, 7),
            s!(32, 9),
            s!(33, 5),
            s!(28, 6),
            s!(26, 5),
            s!(28, 0),
            s!(19, 5),
            s!(19, 11),
            s!(27, 5),
            s!(30, 10),
            s!(30, 9),
            s!(33, 7),
            s!(25, 11),
            s!(24, 4),
            s!(19, 10),
            s!(30, 6),
            s!(21, 8),
            s!(33, 3),
            s!(35, 4),
            s!(46, 7),
            s!(36, 8),
            s!(37, 7),
            s!(17, 1),
            s!(12, 7),
            s!(14, 7),
            s!(15, 9),
            s!(17, 7),
            s!(22, 4),
            s!(14, 7),
            s!(19, 4),
            s!(3, 15),
            s!(-7, 12),
            s!(-5, 13),
            s!(-20, 18),
            s!(-6, 14),
            s!(-24, 15),
            s!(-1, 12),
            s!(0, 14),
        ],
        [
            s!(-24, 11),
            s!(-21, 7),
            s!(-18, 9),
            s!(-15, 5),
            s!(-11, 0),
            s!(-19, 5),
            s!(-18, 2),
            s!(-17, -1),
            s!(-35, 10),
            s!(-28, 5),
            s!(-23, 8),
            s!(-22, 7),
            s!(-18, 2),
            s!(-19, 0),
            s!(-20, -4),
            s!(-40, 6),
            s!(-33, 13),
            s!(-26, 9),
            s!(-28, 11),
            s!(-26, 11),
            s!(-22, 7),
            s!(-19, 4),
            s!(-13, -1),
            s!(-25, 5),
            s!(-28, 15),
            s!(-26, 15),
            s!(-21, 14),
            s!(-18, 13),
            s!(-17, 10),
            s!(-17, 9),
            s!(-16, 6),
            s!(-21, 8),
            s!(-20, 16),
            s!(-13, 13),
            s!(-10, 15),
            s!(-6, 11),
            s!(-2, 6),
            s!(1, 5),
            s!(1, 4),
            s!(-7, 6),
            s!(-16, 16),
            s!(-1, 11),
            s!(-4, 13),
            s!(4, 7),
            s!(17, 3),
            s!(21, 2),
            s!(26, -1),
            s!(0, 7),
            s!(-16, 19),
            s!(-19, 22),
            s!(-3, 19),
            s!(4, 15),
            s!(2, 13),
            s!(6, 12),
            s!(-3, 13),
            s!(-2, 12),
            s!(-18, 23),
            s!(-15, 23),
            s!(-17, 27),
            s!(-18, 25),
            s!(-12, 23),
            s!(0, 19),
            s!(3, 15),
            s!(-8, 21),
        ],
        [
            s!(-19, -17),
            s!(-20, -19),
            s!(-18, -22),
            s!(-18, -12),
            s!(-16, -26),
            s!(-24, -31),
            s!(-19, -34),
            s!(-18, -23),
            s!(-17, -18),
            s!(-18, -19),
            s!(-15, -19),
            s!(-13, -15),
            s!(-13, -17),
            s!(-14, -28),
            s!(-9, -45),
            s!(-11, -24),
            s!(-20, -12),
            s!(-18, -3),
            s!(-20, 9),
            s!(-19, 3),
            s!(-20, 9),
            s!(-15, 6),
            s!(-13, 0),
            s!(-11, -10),
            s!(-14, -13),
            s!(-24, 15),
            s!(-24, 21),
            s!(-26, 40),
            s!(-21, 27),
            s!(-19, 25),
            s!(-15, 19),
            s!(-12, 15),
            s!(-21, 1),
            s!(-23, 16),
            s!(-26, 32),
            s!(-29, 48),
            s!(-24, 49),
            s!(-19, 39),
            s!(-17, 39),
            s!(-8, 11),
            s!(-25, 7),
            s!(-19, 13),
            s!(-27, 34),
            s!(-22, 42),
            s!(-15, 42),
            s!(-11, 45),
            s!(-12, 36),
            s!(-10, 23),
            s!(-25, 7),
            s!(-43, 32),
            s!(-36, 46),
            s!(-40, 55),
            s!(-44, 64),
            s!(-25, 42),
            s!(-30, 37),
            s!(-13, 31),
            s!(-38, 14),
            s!(-30, 19),
            s!(-23, 27),
            s!(-15, 21),
            s!(-25, 27),
            s!(-17, 25),
            s!(-15, 17),
            s!(-28, 25),
        ],
        [
            s!(-16, -30),
            s!(12, -28),
            s!(0, -17),
            s!(-31, -11),
            s!(-14, -19),
            s!(-29, -11),
            s!(4, -27),
            s!(-7, -43),
            s!(0, -23),
            s!(0, -10),
            s!(-15, 0),
            s!(-28, 5),
            s!(-28, 5),
            s!(-24, 2),
            s!(-3, -8),
            s!(-7, -21),
            s!(-27, -16),
            s!(-8, -3),
            s!(-30, 10),
            s!(-35, 16),
            s!(-36, 16),
            s!(-32, 9),
            s!(-21, 0),
            s!(-43, -9),
            s!(-38, -16),
            s!(-13, 0),
            s!(-28, 15),
            s!(-41, 27),
            s!(-49, 29),
            s!(-31, 16),
            s!(-30, 2),
            s!(-71, -6),
            s!(-16, -15),
            s!(4, 6),
            s!(-15, 21),
            s!(-47, 36),
            s!(-52, 37),
            s!(-25, 23),
            s!(-17, 10),
            s!(-45, -6),
            s!(4, -12),
            s!(29, 10),
            s!(-20, 30),
            s!(-24, 35),
            s!(-10, 32),
            s!(16, 27),
            s!(12, 23),
            s!(-7, -8),
            s!(-25, -18),
            s!(-2, 17),
            s!(12, 17),
            s!(24, 13),
            s!(9, 17),
            s!(2, 20),
            s!(11, 17),
            s!(-26, -25),
            s!(-152, -34),
            s!(-1, -22),
            s!(-5, -22),
            s!(-11, -17),
            s!(18, -18),
            s!(28, -25),
            s!(31, -20),
            s!(-21, -86),
        ],
    ]),
};
