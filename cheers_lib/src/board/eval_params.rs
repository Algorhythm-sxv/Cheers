#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],
    pub knight_behind_pawn: EvalScore,
    pub knight_threats: [EvalScore; 6],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_pair: EvalScore,
    pub bishop_threats: [EvalScore; 6],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],
    pub rook_queen_file: EvalScore,
    pub rook_threats: [EvalScore; 6],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 5],
    pub pawn_backward: [EvalScore; 2],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],
    pub knight_beind_pawn: [i16; 2],
    pub knight_threats: [[i16; 2]; 6],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],
    pub bishop_beind_pawn: [i16; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_threats: [[i16; 2]; 6],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],
    pub rook_queen_file: [i16; 2],
    pub rook_threats: [[i16; 2]; 6],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 5],
    pub pawn_backward: [[i16; 2]; 2],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
    ()
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(47, 109),
        s!(377, 176),
        s!(346, 196),
        s!(449, 328),
        s!(906, 589),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-86, -75),
        s!(-62, -39),
        s!(-43, -19),
        s!(-40, -3),
        s!(-29, -7),
        s!(-25, 3),
        s!(-20, 1),
        s!(-14, 4),
        s!(-7, -2),
    ],
    knight_outpost: [s!(-41, -15), s!(-36, -22), s!(-22, -7)],
    knight_behind_pawn: s!(6, 5),
    knight_threats: [
        s!(-3, 5),
        s!(0, 0),
        s!(5, 23),
        s!(27, 3),
        s!(0, -2),
        s!(75, -18),
    ],
    bishop_mobility: [
        s!(-43, -38),
        s!(-52, -19),
        s!(-36, -18),
        s!(-25, -7),
        s!(-19, -2),
        s!(-13, 4),
        s!(-9, 10),
        s!(-5, 11),
        s!(-1, 14),
        s!(1, 13),
        s!(7, 16),
        s!(16, 9),
        s!(22, 19),
        s!(26, 6),
    ],
    bishop_outpost: [s!(-57, -30), s!(-51, -33), s!(-26, -31)],
    bishop_behind_pawn: s!(6, 3),
    bishop_pair: s!(24, 30),
    bishop_threats: [
        s!(-1, 7),
        s!(13, 13),
        s!(0, 0),
        s!(13, -4),
        s!(16, -4),
        s!(34, 16),
    ],
    rook_mobility: [
        s!(-71, -89),
        s!(-56, -47),
        s!(-16, -29),
        s!(-11, -13),
        s!(-11, -9),
        s!(-7, -10),
        s!(-7, -4),
        s!(-2, -4),
        s!(0, -1),
        s!(5, -2),
        s!(8, 1),
        s!(10, 3),
        s!(15, 6),
        s!(13, 8),
        s!(40, -4),
    ],
    rook_on_open_file: [s!(-25, -13), s!(-9, -10), s!(-1, -16)],
    rook_queen_file: s!(0, 9),
    rook_threats: [
        s!(-12, 10),
        s!(0, 10),
        s!(5, 10),
        s!(0, 0),
        s!(27, -25),
        s!(133, -32),
    ],
    queen_mobility: [
        s!(0, 0),
        s!(-57, -191),
        s!(-110, -37),
        s!(-48, -118),
        s!(-37, -61),
        s!(-29, -78),
        s!(-25, -62),
        s!(-23, -43),
        s!(-22, -21),
        s!(-17, -30),
        s!(-19, -4),
        s!(-16, -8),
        s!(-12, 0),
        s!(-10, -1),
        s!(-8, 3),
        s!(-7, 6),
        s!(-11, 15),
        s!(-3, 10),
        s!(-10, 20),
        s!(-13, 24),
        s!(-3, 18),
        s!(1, 19),
        s!(-7, 20),
        s!(38, -12),
        s!(80, -30),
        s!(9, 4),
        s!(101, -51),
        s!(537, -271),
    ],
    queen_discovery_risk: s!(-14, 14),
    king_on_open_file: [s!(12, 1), s!(0, 12), s!(-20, 5)],
    king_ring_attacks: [
        s!(45, -19),
        s!(41, -14),
        s!(31, -10),
        s!(17, -11),
        s!(-21, 4),
        s!(-104, 41),
        s!(-134, 54),
        s!(-178, 72),
        s!(-425, 227),
        s!(-398, 333),
        s!(-147, 384),
        s!(-180, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(1176, -488),
        s!(16, 0),
        s!(32, -6),
        s!(30, -10),
        s!(15, 1),
        s!(8, 0),
        s!(0, 0),
        s!(-4, 3),
        s!(-8, 2),
        s!(-9, 1),
        s!(-11, 3),
        s!(-14, 3),
        s!(-19, 4),
        s!(-24, 6),
        s!(-24, 3),
        s!(-34, 5),
        s!(-33, 2),
        s!(-22, -2),
        s!(-11, -6),
        s!(-11, -8),
        s!(-5, -12),
        s!(-5, -16),
        s!(-33, -16),
        s!(-21, -19),
        s!(-18, -23),
        s!(-72, -17),
        s!(-16, -29),
    ],
    king_discovery_risk: s!(-13, 0),
    pawn_connected: [s!(-13, -9), s!(0, 0), s!(12, 4)],
    pawn_phalanx: [s!(0, 2), s!(6, 4), s!(5, -4)],
    pawn_isolated: [s!(6, 8), s!(3, 7)],
    pawn_doubled: [s!(0, -1), s!(0, 2), s!(0, -3), s!(1, -20), s!(0, 672)],
    pawn_backward: [s!(6, 13), s!(0, 9)],
    passed_pawn_friendly_king_distance: [s!(-4, 9), s!(-6, 2), s!(-10, -9), s!(-10, -11)],
    passed_pawn_enemy_king_distance: [s!(7, -29), s!(22, -10), s!(0, 9), s!(-6, 21)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(16, -10),
        s!(13, -1),
        s!(10, -18),
        s!(0, -29),
        s!(8, -18),
        s!(13, -19),
        s!(41, -16),
        s!(13, -14),
        s!(20, -4),
        s!(18, 0),
        s!(15, -9),
        s!(-7, -9),
        s!(11, -14),
        s!(14, -4),
        s!(18, 0),
        s!(26, -9),
        s!(21, 14),
        s!(13, 14),
        s!(2, 13),
        s!(2, 10),
        s!(-8, 11),
        s!(-17, 19),
        s!(-33, 29),
        s!(11, 16),
        s!(24, 31),
        s!(23, 36),
        s!(11, 28),
        s!(0, 30),
        s!(2, 26),
        s!(16, 29),
        s!(12, 38),
        s!(-9, 35),
        s!(33, 72),
        s!(24, 58),
        s!(13, 42),
        s!(15, 26),
        s!(0, 37),
        s!(-18, 64),
        s!(-28, 60),
        s!(-49, 82),
        s!(56, -13),
        s!(76, -5),
        s!(9, 59),
        s!(34, 0),
        s!(15, -3),
        s!(11, 30),
        s!(1, 72),
        s!(-14, 57),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-4, -66),
            s!(2, -69),
            s!(1, -62),
            s!(4, -60),
            s!(2, -64),
            s!(25, -70),
            s!(25, -78),
            s!(8, -79),
            s!(-8, -72),
            s!(-10, -74),
            s!(0, -73),
            s!(0, -67),
            s!(1, -69),
            s!(0, -73),
            s!(8, -81),
            s!(-1, -79),
            s!(-5, -69),
            s!(-7, -69),
            s!(3, -77),
            s!(12, -79),
            s!(9, -76),
            s!(13, -80),
            s!(0, -76),
            s!(-13, -77),
            s!(3, -58),
            s!(0, -63),
            s!(3, -65),
            s!(13, -71),
            s!(15, -71),
            s!(18, -72),
            s!(1, -67),
            s!(0, -68),
            s!(0, -45),
            s!(3, -35),
            s!(14, -27),
            s!(6, -24),
            s!(29, -39),
            s!(66, -61),
            s!(25, -42),
            s!(21, -56),
            s!(1, 74),
            s!(5, 60),
            s!(19, 1),
            s!(9, 40),
            s!(53, 36),
            s!(53, 9),
            s!(31, -4),
            s!(7, 3),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-37, -6),
            s!(-11, -4),
            s!(-33, 2),
            s!(-23, 8),
            s!(-18, 0),
            s!(-27, 5),
            s!(-15, -5),
            s!(-42, 9),
            s!(-13, -8),
            s!(-24, 0),
            s!(-10, -7),
            s!(-2, 1),
            s!(-1, 0),
            s!(-9, -1),
            s!(-8, -4),
            s!(-6, -6),
            s!(-14, -5),
            s!(-11, 1),
            s!(-5, 0),
            s!(-10, 12),
            s!(-1, 9),
            s!(0, 0),
            s!(6, -8),
            s!(-10, -9),
            s!(-5, 0),
            s!(-9, 3),
            s!(-1, 11),
            s!(-1, 14),
            s!(4, 15),
            s!(11, 1),
            s!(-1, -4),
            s!(-8, 4),
            s!(1, 1),
            s!(5, 2),
            s!(-6, 9),
            s!(21, 14),
            s!(1, 13),
            s!(11, 10),
            s!(-8, 4),
            s!(17, -6),
            s!(-22, -4),
            s!(-24, 0),
            s!(-19, 15),
            s!(-3, 13),
            s!(5, 1),
            s!(6, 4),
            s!(-11, -4),
            s!(-47, 4),
            s!(-61, 3),
            s!(-39, 7),
            s!(-4, -1),
            s!(-17, 4),
            s!(-6, -3),
            s!(2, -10),
            s!(-23, -1),
            s!(-22, -11),
            s!(-169, 29),
            s!(-38, -24),
            s!(-48, 2),
            s!(-41, 3),
            s!(-13, -1),
            s!(-63, -1),
            s!(-81, -8),
            s!(-93, -17),
        ],
        [
            s!(45, -14),
            s!(27, -3),
            s!(39, -12),
            s!(32, -1),
            s!(27, -2),
            s!(16, 1),
            s!(38, -16),
            s!(50, -12),
            s!(25, 0),
            s!(45, -12),
            s!(39, -9),
            s!(35, -3),
            s!(37, -1),
            s!(43, -7),
            s!(55, -12),
            s!(40, -11),
            s!(42, -10),
            s!(41, -4),
            s!(37, -2),
            s!(34, 1),
            s!(40, 0),
            s!(43, -4),
            s!(37, -11),
            s!(46, -9),
            s!(20, -3),
            s!(20, -3),
            s!(29, 0),
            s!(32, -1),
            s!(41, -3),
            s!(31, 0),
            s!(34, -8),
            s!(16, -3),
            s!(7, 5),
            s!(14, 4),
            s!(20, 0),
            s!(17, 5),
            s!(23, 2),
            s!(11, 0),
            s!(24, -4),
            s!(19, -3),
            s!(11, 3),
            s!(14, 0),
            s!(24, 0),
            s!(2, 8),
            s!(30, -1),
            s!(35, 3),
            s!(30, -2),
            s!(33, -3),
            s!(0, 0),
            s!(9, 0),
            s!(-1, 0),
            s!(11, -6),
            s!(0, 1),
            s!(29, -7),
            s!(-4, 3),
            s!(24, -16),
            s!(0, 1),
            s!(-16, -6),
            s!(7, -6),
            s!(-12, 0),
            s!(-46, 3),
            s!(4, -3),
            s!(18, -5),
            s!(-19, 5),
        ],
        [
            s!(-4, -2),
            s!(-3, -5),
            s!(0, -5),
            s!(1, -5),
            s!(2, -11),
            s!(-5, -8),
            s!(-16, -8),
            s!(5, -21),
            s!(-17, -8),
            s!(-12, -8),
            s!(-15, -3),
            s!(-5, -9),
            s!(-2, -12),
            s!(-5, -11),
            s!(3, -16),
            s!(-28, -10),
            s!(-18, -8),
            s!(-14, -7),
            s!(-11, -8),
            s!(-1, -11),
            s!(-1, -11),
            s!(3, -17),
            s!(9, -23),
            s!(2, -19),
            s!(-18, -4),
            s!(-26, -2),
            s!(-25, 0),
            s!(-17, -1),
            s!(-16, -3),
            s!(-11, -8),
            s!(-1, -15),
            s!(-1, -18),
            s!(-18, -3),
            s!(0, -10),
            s!(1, -6),
            s!(8, -10),
            s!(-5, -7),
            s!(11, -11),
            s!(10, -14),
            s!(15, -15),
            s!(0, -5),
            s!(-1, -4),
            s!(-8, -5),
            s!(17, -11),
            s!(18, -14),
            s!(32, -16),
            s!(26, -14),
            s!(25, -18),
            s!(-15, 0),
            s!(-22, 7),
            s!(-6, 1),
            s!(16, -6),
            s!(-4, -5),
            s!(20, -9),
            s!(30, -11),
            s!(13, -11),
            s!(-9, 5),
            s!(-1, 0),
            s!(-15, 5),
            s!(-14, 1),
            s!(0, -2),
            s!(41, -15),
            s!(47, -16),
            s!(-19, 0),
        ],
        [
            s!(19, -41),
            s!(12, -42),
            s!(13, -40),
            s!(18, -50),
            s!(12, -36),
            s!(-3, -40),
            s!(-6, -39),
            s!(36, -67),
            s!(10, -30),
            s!(11, -31),
            s!(13, -32),
            s!(16, -29),
            s!(18, -34),
            s!(17, -51),
            s!(19, -57),
            s!(16, -35),
            s!(4, -47),
            s!(12, -46),
            s!(2, -7),
            s!(8, -24),
            s!(5, -13),
            s!(11, -17),
            s!(11, -9),
            s!(9, -23),
            s!(10, -36),
            s!(-2, -12),
            s!(0, -13),
            s!(-6, 7),
            s!(3, -2),
            s!(7, -11),
            s!(11, -11),
            s!(7, -20),
            s!(-8, -30),
            s!(-1, -9),
            s!(-10, -8),
            s!(-16, 16),
            s!(-8, 21),
            s!(-1, 16),
            s!(-2, 5),
            s!(13, -14),
            s!(-10, -33),
            s!(-13, -18),
            s!(3, -5),
            s!(-2, 0),
            s!(15, 20),
            s!(10, 0),
            s!(51, -31),
            s!(5, -11),
            s!(-20, -11),
            s!(-30, -7),
            s!(-34, 6),
            s!(-53, 40),
            s!(-55, 32),
            s!(23, 18),
            s!(-14, 21),
            s!(71, -59),
            s!(-23, -14),
            s!(-21, -2),
            s!(16, -20),
            s!(2, 0),
            s!(45, -29),
            s!(33, -14),
            s!(2, -22),
            s!(-19, 10),
        ],
        [
            s!(-63, -9),
            s!(-1, -10),
            s!(-13, 0),
            s!(-38, 7),
            s!(-11, -4),
            s!(-38, 5),
            s!(4, -15),
            s!(-19, -27),
            s!(1, -17),
            s!(-19, 4),
            s!(-22, 13),
            s!(-39, 21),
            s!(-31, 19),
            s!(-26, 17),
            s!(8, 3),
            s!(-6, -8),
            s!(0, -21),
            s!(22, -3),
            s!(-22, 16),
            s!(-37, 24),
            s!(-33, 23),
            s!(-19, 18),
            s!(0, 4),
            s!(-30, -3),
            s!(18, -27),
            s!(26, -7),
            s!(10, 11),
            s!(-27, 25),
            s!(-25, 26),
            s!(-41, 20),
            s!(-11, 3),
            s!(-55, -3),
            s!(0, -23),
            s!(16, -2),
            s!(28, 9),
            s!(9, 21),
            s!(-1, 21),
            s!(0, 18),
            s!(20, 5),
            s!(-20, -3),
            s!(28, -19),
            s!(109, -7),
            s!(38, 8),
            s!(59, 6),
            s!(8, 15),
            s!(60, 14),
            s!(68, 8),
            s!(5, -1),
            s!(12, -17),
            s!(85, -4),
            s!(64, -2),
            s!(42, 0),
            s!(47, 1),
            s!(77, 5),
            s!(20, 12),
            s!(-19, 0),
            s!(55, -45),
            s!(37, -17),
            s!(74, -22),
            s!(40, -12),
            s!(61, -13),
            s!(62, -11),
            s!(41, -13),
            s!(8, -26),
        ],
    ]),
};
