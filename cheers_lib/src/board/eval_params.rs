#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_behind_pawn: EvalScore,
    pub knight_king_distance: [EvalScore; 4],
    pub knight_outpost: [EvalScore; 2],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_king_distance: [EvalScore; 4],
    pub bishop_outpost: [EvalScore; 2],
    pub bishop_pair: EvalScore,
    pub bishop_long_diagonal: EvalScore,

    pub rook_mobility: [EvalScore; 15],
    pub rook_open_file: [EvalScore; 2],
    pub rook_on_seventh: EvalScore,
    pub rook_trapped: [EvalScore; 2],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_mobility: [EvalScore; 9],
    pub king_defenders: [EvalScore; 12],
    pub king_open_file: [EvalScore; 2],
    pub no_enemy_queen: EvalScore,

    // passed pawn terms
    pub passed_pawn: [EvalScore; 8],
    pub passed_pawn_advanced: [EvalScore; 6],
    pub passed_pawn_unblocked: EvalScore,
    pub passed_pawn_connected: EvalScore,
    pub passed_pawn_friendly_rook: EvalScore,
    pub passed_pawn_enemy_king_too_far: EvalScore,

    pub double_pawn: [EvalScore; 8],
    pub isolated_pawn: [EvalScore; 8],
    pub connected_pawn: [EvalScore; 8],

    pub tempo: EvalScore,

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knights_behind_pawns: [i16; 2],
    pub knight_king_distance: [[i16; 2]; 4],
    pub knight_outposts: [[i16; 2]; 2],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishops_behind_pawns: [i16; 2],
    pub bishop_king_distance: [[i16; 2]; 4],
    pub bishop_outposts: [[i16; 2]; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_long_diagonals: [i16; 2],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_open_files: [[i16; 2]; 2],
    pub rooks_on_seventh: [i16; 2],
    pub rook_trapped: [[i16; 2]; 2],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risks: [i16; 2],

    pub king_mobility: [[i16; 2]; 9],
    pub king_defenders: [[i16; 2]; 12],
    pub king_open_file: [[i16; 2]; 2],
    pub no_enemy_queen: [i16; 2],

    pub passed_pawn: [[i16; 2]; 8],
    pub passed_pawn_advanced: [[i16; 2]; 6],
    pub passed_pawn_unblocked: [i16; 2],
    pub passed_pawn_connected: [i16; 2],
    pub passed_pawn_friendly_rook: [i16; 2],
    pub passed_pawn_enemy_king_too_far: [i16; 2],

    pub double_pawn: [[i16; 2]; 8],
    pub isolated_pawn: [[i16; 2]; 8],
    pub connected_pawn: [[i16; 2]; 8],

    pub tempo: [i16; 2],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(83, 74),
        s!(381, 276),
        s!(404, 273),
        s!(621, 431),
        s!(871, 945),
        s!(20000, 20000),
    ]),
    knight_mobility: [
        s!(-28, -90),
        s!(-10, -64),
        s!(17, -33),
        s!(23, -16),
        s!(43, -22),
        s!(48, -9),
        s!(57, -11),
        s!(69, -7),
        s!(79, -19),
    ],
    knight_behind_pawn: s!(7, 10),
    knight_king_distance: [s!(-15, 6), s!(-14, 0), s!(-25, 2), s!(-58, 10)],
    knight_outpost: [s!(13, -15), s!(33, 5)],
    bishop_mobility: [
        s!(-4, -68),
        s!(-8, -53),
        s!(14, -48),
        s!(31, -28),
        s!(42, -22),
        s!(53, -15),
        s!(59, -9),
        s!(64, -7),
        s!(74, -5),
        s!(76, -6),
        s!(87, -6),
        s!(108, -19),
        s!(92, -3),
        s!(113, -26),
    ],
    bishop_behind_pawn: s!(10, 6),
    bishop_king_distance: [s!(-6, -1), s!(-5, -2), s!(-7, 0), s!(-44, 11)],
    bishop_outpost: [s!(8, -3), s!(43, -6)],
    bishop_pair: s!(-3, 39),
    bishop_long_diagonal: s!(36, -11),
    rook_mobility: [
        s!(-72, -221),
        s!(-66, -50),
        s!(-22, -11),
        s!(-16, 8),
        s!(-17, 16),
        s!(-12, 12),
        s!(-9, 21),
        s!(-2, 19),
        s!(0, 25),
        s!(9, 24),
        s!(13, 28),
        s!(20, 29),
        s!(32, 32),
        s!(34, 32),
        s!(66, 15),
    ],
    rook_open_file: [s!(14, 11), s!(39, -4)],
    rook_on_seventh: s!(8, -22),
    rook_trapped: [s!(-29, 14), s!(0, 8)],
    queen_mobility: [
        s!(-40, -1),
        s!(-175, -71),
        s!(-116, -154),
        s!(-39, -140),
        s!(-32, -7),
        s!(-24, -19),
        s!(-14, -11),
        s!(-12, 11),
        s!(-10, 42),
        s!(0, 16),
        s!(-4, 71),
        s!(2, 59),
        s!(7, 80),
        s!(10, 74),
        s!(15, 76),
        s!(16, 85),
        s!(10, 102),
        s!(17, 97),
        s!(10, 108),
        s!(5, 115),
        s!(25, 108),
        s!(39, 107),
        s!(14, 115),
        s!(87, 66),
        s!(98, 59),
        s!(82, 77),
        s!(136, 39),
        s!(87, 43),
    ],
    queen_discovery_risk: s!(-19, 13),
    king_mobility: [
        s!(-71, 154),
        s!(-107, 28),
        s!(-44, 33),
        s!(-9, 2),
        s!(-13, 15),
        s!(9, -17),
        s!(44, -9),
        s!(48, -7),
        s!(64, -34),
    ],
    king_defenders: [
        s!(-66, -3),
        s!(-28, 4),
        s!(-4, 1),
        s!(10, -1),
        s!(20, 2),
        s!(30, -4),
        s!(35, -38),
        s!(-10, -12),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_open_file: [s!(-21, 12), s!(-47, -1)],
    no_enemy_queen: s!(445, -193),
    passed_pawn: [
        s!(9, -8),
        s!(3, 5),
        s!(-8, 3),
        s!(-21, 4),
        s!(-7, 0),
        s!(-7, 6),
        s!(9, 12),
        s!(7, 1),
    ],
    passed_pawn_advanced: [
        s!(-19, -17),
        s!(-6, -16),
        s!(-11, 0),
        s!(5, 5),
        s!(27, 20),
        s!(60, -48),
    ],
    passed_pawn_unblocked: s!(9, 19),
    passed_pawn_connected: s!(15, -3),
    passed_pawn_friendly_rook: s!(15, 16),
    passed_pawn_enemy_king_too_far: s!(-45, 60),
    double_pawn: [
        s!(-16, -31),
        s!(20, -25),
        s!(-20, -15),
        s!(-14, -21),
        s!(-9, -21),
        s!(-7, -10),
        s!(-2, -14),
        s!(1, -28),
    ],
    isolated_pawn: [
        s!(-11, 1),
        s!(-10, -5),
        s!(-8, -5),
        s!(-19, -5),
        s!(-15, -5),
        s!(-6, -5),
        s!(-5, -8),
        s!(-17, 5),
    ],
    connected_pawn: [
        s!(0, 11),
        s!(11, 11),
        s!(10, 14),
        s!(6, 15),
        s!(11, 13),
        s!(5, 9),
        s!(15, 12),
        s!(13, 11),
    ],
    tempo: s!(13, 13),
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-7, 12),
            s!(2, 10),
            s!(0, 17),
            s!(7, 15),
            s!(7, 20),
            s!(32, 6),
            s!(37, 0),
            s!(8, -10),
            s!(-9, 1),
            s!(-20, 5),
            s!(0, 0),
            s!(-4, 8),
            s!(0, 9),
            s!(-9, 3),
            s!(3, -2),
            s!(-7, -10),
            s!(-12, 7),
            s!(-20, 11),
            s!(-2, -3),
            s!(17, -4),
            s!(5, 0),
            s!(14, -7),
            s!(-17, 4),
            s!(-26, -5),
            s!(1, 23),
            s!(-12, 23),
            s!(-3, 15),
            s!(13, 7),
            s!(9, 8),
            s!(7, 8),
            s!(-12, 18),
            s!(-8, 8),
            s!(-10, 67),
            s!(-3, 63),
            s!(-1, 61),
            s!(6, 40),
            s!(2, 45),
            s!(48, 34),
            s!(-14, 49),
            s!(-15, 48),
            s!(0, 192),
            s!(19, 176),
            s!(-10, 170),
            s!(25, 140),
            s!(33, 139),
            s!(25, 142),
            s!(-21, 176),
            s!(-49, 165),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-12, -30),
            s!(24, -41),
            s!(-7, -25),
            s!(-3, -18),
            s!(0, -24),
            s!(0, -20),
            s!(13, -32),
            s!(-51, -11),
            s!(39, -48),
            s!(8, -24),
            s!(24, -36),
            s!(25, -23),
            s!(26, -26),
            s!(14, -31),
            s!(19, -36),
            s!(17, -39),
            s!(25, -37),
            s!(17, -18),
            s!(25, -26),
            s!(8, -3),
            s!(21, -7),
            s!(14, -23),
            s!(33, -38),
            s!(4, -33),
            s!(41, -22),
            s!(28, -23),
            s!(29, -8),
            s!(22, 0),
            s!(30, 1),
            s!(37, -11),
            s!(25, -28),
            s!(15, -13),
            s!(52, -22),
            s!(45, -18),
            s!(26, -6),
            s!(68, 3),
            s!(46, -7),
            s!(53, -5),
            s!(39, -14),
            s!(68, -34),
            s!(30, -33),
            s!(20, -26),
            s!(22, -2),
            s!(62, -9),
            s!(89, -30),
            s!(113, -30),
            s!(59, -31),
            s!(19, -24),
            s!(-24, -23),
            s!(-8, -12),
            s!(96, -41),
            s!(58, -24),
            s!(114, -45),
            s!(83, -38),
            s!(40, -29),
            s!(42, -52),
            s!(-152, 1),
            s!(13, -64),
            s!(13, -31),
            s!(-17, -9),
            s!(124, -44),
            s!(-50, -21),
            s!(-52, -39),
            s!(-63, -67),
        ],
        [
            s!(30, -16),
            s!(35, -19),
            s!(48, -27),
            s!(28, -8),
            s!(31, -12),
            s!(7, -8),
            s!(36, -29),
            s!(9, -6),
            s!(24, -17),
            s!(22, -14),
            s!(47, -20),
            s!(37, -13),
            s!(38, -7),
            s!(51, -21),
            s!(29, -13),
            s!(41, -22),
            s!(66, -24),
            s!(58, -16),
            s!(11, 2),
            s!(30, -1),
            s!(41, 0),
            s!(0, 1),
            s!(36, -23),
            s!(50, -26),
            s!(41, -19),
            s!(25, -10),
            s!(38, 0),
            s!(10, 5),
            s!(15, 11),
            s!(31, -4),
            s!(31, -17),
            s!(21, -12),
            s!(0, 3),
            s!(38, -6),
            s!(27, -2),
            s!(1, 17),
            s!(1, 14),
            s!(14, 0),
            s!(47, -16),
            s!(28, -11),
            s!(19, -15),
            s!(17, -5),
            s!(25, 1),
            s!(15, 3),
            s!(71, -11),
            s!(27, 9),
            s!(54, -10),
            s!(54, -15),
            s!(-1, -15),
            s!(-14, 4),
            s!(-4, -7),
            s!(13, -17),
            s!(25, -18),
            s!(54, -22),
            s!(-15, 10),
            s!(33, -34),
            s!(-2, -3),
            s!(-4, -26),
            s!(0, -21),
            s!(-59, 3),
            s!(-55, -9),
            s!(18, -18),
            s!(17, -24),
            s!(-38, 6),
        ],
        [
            s!(0, 5),
            s!(2, -1),
            s!(10, 0),
            s!(14, 1),
            s!(23, -9),
            s!(22, -3),
            s!(0, -5),
            s!(28, -29),
            s!(-20, 1),
            s!(-12, 0),
            s!(-15, 7),
            s!(-3, -2),
            s!(-1, -1),
            s!(12, -6),
            s!(40, -20),
            s!(-29, -9),
            s!(-22, 0),
            s!(-19, 1),
            s!(-14, 0),
            s!(2, -3),
            s!(-1, -1),
            s!(12, -12),
            s!(19, -15),
            s!(6, -14),
            s!(-24, 8),
            s!(-43, 13),
            s!(-37, 17),
            s!(-27, 14),
            s!(-27, 13),
            s!(-4, 1),
            s!(2, -3),
            s!(15, -12),
            s!(-31, 13),
            s!(-8, 2),
            s!(-8, 15),
            s!(3, 7),
            s!(-12, 9),
            s!(13, 5),
            s!(43, -6),
            s!(19, 1),
            s!(5, 9),
            s!(-12, 13),
            s!(-9, 12),
            s!(20, 5),
            s!(41, -5),
            s!(55, -5),
            s!(86, -12),
            s!(41, -10),
            s!(-27, 41),
            s!(-40, 54),
            s!(-2, 40),
            s!(31, 30),
            s!(-13, 35),
            s!(82, 13),
            s!(77, 13),
            s!(29, 17),
            s!(20, 19),
            s!(26, 9),
            s!(27, 13),
            s!(66, -2),
            s!(92, -5),
            s!(107, -17),
            s!(64, -7),
            s!(23, 3),
        ],
        [
            s!(28, -24),
            s!(13, -12),
            s!(18, -20),
            s!(26, -28),
            s!(16, -1),
            s!(13, -14),
            s!(-5, 1),
            s!(43, -52),
            s!(8, 16),
            s!(15, -2),
            s!(14, -3),
            s!(23, -6),
            s!(26, -15),
            s!(40, -36),
            s!(44, -43),
            s!(34, 4),
            s!(5, -23),
            s!(10, -14),
            s!(0, 31),
            s!(6, 13),
            s!(0, 36),
            s!(10, 27),
            s!(9, 54),
            s!(13, 14),
            s!(7, 5),
            s!(-10, 31),
            s!(-3, 23),
            s!(-14, 55),
            s!(-1, 48),
            s!(7, 34),
            s!(14, 39),
            s!(4, 38),
            s!(-5, -4),
            s!(-9, 36),
            s!(-22, 35),
            s!(-25, 77),
            s!(-20, 81),
            s!(-7, 83),
            s!(3, 56),
            s!(26, 39),
            s!(-10, -11),
            s!(-22, 14),
            s!(3, 46),
            s!(1, 48),
            s!(22, 91),
            s!(75, 25),
            s!(113, -2),
            s!(71, 8),
            s!(-35, 42),
            s!(-43, 41),
            s!(-42, 50),
            s!(-65, 104),
            s!(-52, 73),
            s!(71, 64),
            s!(6, 75),
            s!(143, -70),
            s!(-53, 60),
            s!(-28, 39),
            s!(36, 13),
            s!(48, 19),
            s!(58, 32),
            s!(5, 64),
            s!(-44, 40),
            s!(-33, 73),
        ],
        [
            s!(-25, -55),
            s!(14, -38),
            s!(-8, -19),
            s!(-45, -16),
            s!(-22, -27),
            s!(-37, -19),
            s!(26, -46),
            s!(51, -93),
            s!(23, -40),
            s!(-81, 4),
            s!(-101, 19),
            s!(-132, 30),
            s!(-121, 25),
            s!(-113, 23),
            s!(-54, 4),
            s!(22, -36),
            s!(-9, -31),
            s!(-43, 0),
            s!(-121, 24),
            s!(-128, 30),
            s!(-141, 33),
            s!(-115, 23),
            s!(-85, 10),
            s!(-36, -18),
            s!(-12, -29),
            s!(-30, 4),
            s!(-31, 16),
            s!(-126, 31),
            s!(-99, 29),
            s!(-120, 28),
            s!(-100, 18),
            s!(-76, -10),
            s!(-3, -22),
            s!(-26, 11),
            s!(-6, 20),
            s!(-36, 24),
            s!(-60, 25),
            s!(-63, 32),
            s!(-36, 24),
            s!(-11, -3),
            s!(78, -21),
            s!(112, 13),
            s!(0, 26),
            s!(31, 20),
            s!(-24, 31),
            s!(49, 31),
            s!(45, 35),
            s!(-19, 11),
            s!(59, -15),
            s!(107, 9),
            s!(33, 22),
            s!(9, 18),
            s!(26, 19),
            s!(88, 25),
            s!(-48, 39),
            s!(-28, 15),
            s!(144, -77),
            s!(110, -22),
            s!(114, -16),
            s!(116, -15),
            s!(112, -12),
            s!(157, -14),
            s!(63, -12),
            s!(54, -52),
        ],
    ]),
};
