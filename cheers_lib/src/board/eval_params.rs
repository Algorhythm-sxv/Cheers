#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_behind_pawn: EvalScore,
    pub knight_king_distance: [EvalScore; 4],
    pub knight_outpost: [EvalScore; 2],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_king_distance: [EvalScore; 4],
    pub bishop_outpost: [EvalScore; 2],
    pub bishop_pair: EvalScore,
    pub bishop_long_diagonal: EvalScore,

    pub rook_mobility: [EvalScore; 15],
    pub rook_open_file: [EvalScore; 2],
    pub rook_on_seventh: EvalScore,
    pub rook_trapped: [EvalScore; 2],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_mobility: [EvalScore; 9],
    pub king_defenders: [EvalScore; 12],
    pub king_open_file: [EvalScore; 2],
    pub no_enemy_queen: EvalScore,

    // passed pawn terms
    pub passed_pawn: [EvalScore; 8],
    pub passed_pawn_advanced: [EvalScore; 6],
    pub passed_pawn_unblocked: EvalScore,
    pub passed_pawn_connected: EvalScore,
    pub passed_pawn_friendly_rook: EvalScore,
    pub passed_pawn_enemy_king_too_far: EvalScore,

    pub double_pawn: [EvalScore; 8],
    pub isolated_pawn: [EvalScore; 8],
    pub connected_pawn: [EvalScore; 8],

    pub tempo: EvalScore,

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knights_behind_pawns: [i16; 2],
    pub knight_king_distance: [[i16; 2]; 4],
    pub knight_outposts: [[i16; 2]; 2],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishops_behind_pawns: [i16; 2],
    pub bishop_king_distance: [[i16; 2]; 4],
    pub bishop_outposts: [[i16; 2]; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_long_diagonals: [i16; 2],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_open_files: [[i16; 2]; 2],
    pub rooks_on_seventh: [i16; 2],
    pub rook_trapped: [[i16; 2]; 2],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risks: [i16; 2],

    pub king_mobility: [[i16; 2]; 9],
    pub king_defenders: [[i16; 2]; 12],
    pub king_open_file: [[i16; 2]; 2],
    pub no_enemy_queen: [i16; 2],

    pub passed_pawn: [[i16; 2]; 8],
    pub passed_pawn_advanced: [[i16; 2]; 6],
    pub passed_pawn_unblocked: [i16; 2],
    pub passed_pawn_connected: [i16; 2],
    pub passed_pawn_friendly_rook: [i16; 2],
    pub passed_pawn_enemy_king_too_far: [i16; 2],

    pub double_pawn: [[i16; 2]; 8],
    pub isolated_pawn: [[i16; 2]; 8],
    pub connected_pawn: [[i16; 2]; 8],

    pub tempo: [i16; 2],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(85, 94),
        s!(353, 275),
        s!(342, 286),
        s!(555, 411),
        s!(709, 757),
        s!(20000, 20000),
    ]),
    knight_mobility: [
        s!(-28, -308),
        s!(-9, -72),
        s!(6, -30),
        s!(14, 4),
        s!(27, 23),
        s!(33, 26),
        s!(45, 26),
        s!(62, 12),
        s!(70, -14),
    ],
    knight_behind_pawn: s!(1, 28),
    knight_king_distance: [s!(-17, 3), s!(-31, 11), s!(-33, 0), s!(-64, 2)],
    knight_outpost: [s!(11, -4), s!(41, 10)],
    bishop_mobility: [
        s!(-7, -148),
        s!(12, -134),
        s!(-5, -24),
        s!(8, 0),
        s!(23, 6),
        s!(28, 23),
        s!(38, 25),
        s!(40, 22),
        s!(49, 21),
        s!(54, 9),
        s!(87, 0),
        s!(142, -43),
        s!(104, -3),
        s!(127, -54),
    ],
    bishop_behind_pawn: s!(14, -3),
    bishop_king_distance: [s!(0, 0), s!(-1, -6), s!(6, 11), s!(-104, 69)],
    bishop_outpost: [s!(24, -9), s!(70, -16)],
    bishop_pair: s!(-2, 59),
    bishop_long_diagonal: s!(38, -12),
    rook_mobility: [
        s!(-203, -299),
        s!(-127, -29),
        s!(-25, -32),
        s!(-23, 8),
        s!(-21, 12),
        s!(-14, 11),
        s!(-11, 19),
        s!(-8, 27),
        s!(10, 18),
        s!(1, 38),
        s!(1, 39),
        s!(14, 35),
        s!(31, 17),
        s!(37, 30),
        s!(66, -23),
    ],
    rook_open_file: [s!(28, 26), s!(48, 0)],
    rook_on_seventh: s!(52, -22),
    rook_trapped: [s!(-35, 23), s!(12, 55)],
    queen_mobility: [
        s!(-40, -1),
        s!(-167, -82),
        s!(-136, -179),
        s!(-42, -289),
        s!(-28, -52),
        s!(-18, -144),
        s!(-15, 23),
        s!(-19, 42),
        s!(-10, 46),
        s!(-5, 19),
        s!(-3, 42),
        s!(-9, 83),
        s!(3, 79),
        s!(5, 72),
        s!(13, 86),
        s!(15, 68),
        s!(12, 96),
        s!(2, 77),
        s!(0, 82),
        s!(-21, 126),
        s!(-49, 171),
        s!(-11, 128),
        s!(6, 116),
        s!(56, 10),
        s!(31, 20),
        s!(92, 39),
        s!(83, 13),
        s!(70, -7),
    ],
    queen_discovery_risk: s!(-25, 33),
    king_mobility: [
        s!(-129, 96),
        s!(-66, -23),
        s!(-9, 11),
        s!(-6, 14),
        s!(11, 16),
        s!(19, 0),
        s!(69, -24),
        s!(12, 2),
        s!(46, -16),
    ],
    king_defenders: [
        s!(-106, 26),
        s!(-7, -12),
        s!(13, -5),
        s!(22, 4),
        s!(34, 13),
        s!(49, -5),
        s!(40, -33),
        s!(-125, -8),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_open_file: [s!(-30, 19), s!(-55, 11)],
    no_enemy_queen: s!(416, -49),
    passed_pawn: [
        s!(12, -21),
        s!(25, 13),
        s!(7, 10),
        s!(12, 5),
        s!(40, -17),
        s!(42, -15),
        s!(4, 22),
        s!(3, 32),
    ],
    passed_pawn_advanced: [
        s!(-27, -10),
        s!(-35, -18),
        s!(-46, 26),
        s!(-5, 3),
        s!(47, -23),
        s!(179, -62),
    ],
    passed_pawn_unblocked: s!(10, 35),
    passed_pawn_connected: s!(6, -10),
    passed_pawn_friendly_rook: s!(29, -6),
    passed_pawn_enemy_king_too_far: s!(-4, 55),
    double_pawn: [
        s!(-11, -52),
        s!(30, -53),
        s!(-8, 6),
        s!(-36, 17),
        s!(7, -67),
        s!(-27, -43),
        s!(-36, 11),
        s!(65, -45),
    ],
    isolated_pawn: [
        s!(-12, 6),
        s!(-9, -34),
        s!(0, -1),
        s!(-16, -21),
        s!(-23, -5),
        s!(-25, 1),
        s!(-4, 0),
        s!(-4, -2),
    ],
    connected_pawn: [
        s!(5, -5),
        s!(10, 6),
        s!(24, 28),
        s!(15, 0),
        s!(7, 15),
        s!(10, -3),
        s!(16, 1),
        s!(20, 17),
    ],
    tempo: s!(13, 13),
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(1, 42),
            s!(3, 36),
            s!(0, 33),
            s!(6, 54),
            s!(-13, 65),
            s!(29, 11),
            s!(41, -13),
            s!(-12, 0),
            s!(16, 15),
            s!(-11, 28),
            s!(-15, 10),
            s!(-6, 56),
            s!(-4, 18),
            s!(-9, 12),
            s!(24, -6),
            s!(-8, -9),
            s!(10, 14),
            s!(-7, 55),
            s!(10, 8),
            s!(22, 8),
            s!(10, 2),
            s!(32, -3),
            s!(4, -2),
            s!(-23, -5),
            s!(16, 38),
            s!(0, 35),
            s!(7, -2),
            s!(31, -7),
            s!(0, 0),
            s!(20, 15),
            s!(-13, 21),
            s!(-9, 11),
            s!(0, 82),
            s!(-19, 96),
            s!(1, 32),
            s!(11, 72),
            s!(6, 70),
            s!(-43, 117),
            s!(-61, 125),
            s!(15, 36),
            s!(-35, 170),
            s!(51, 116),
            s!(-18, 170),
            s!(38, 56),
            s!(-78, 102),
            s!(-115, 63),
            s!(-79, 123),
            s!(59, 63),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(8, -64),
            s!(18, -31),
            s!(30, -105),
            s!(90, -99),
            s!(-30, -14),
            s!(-6, -38),
            s!(15, -34),
            s!(-110, 46),
            s!(-1, -70),
            s!(67, -7),
            s!(16, -19),
            s!(17, -19),
            s!(20, -44),
            s!(16, -61),
            s!(-13, -57),
            s!(19, -27),
            s!(33, -35),
            s!(46, -10),
            s!(15, -14),
            s!(26, -19),
            s!(26, -33),
            s!(15, -15),
            s!(38, -55),
            s!(5, -44),
            s!(54, -36),
            s!(10, -8),
            s!(26, 19),
            s!(23, 15),
            s!(32, -18),
            s!(30, -19),
            s!(10, -1),
            s!(41, -17),
            s!(82, -19),
            s!(67, -36),
            s!(81, -27),
            s!(69, -50),
            s!(56, -1),
            s!(83, -16),
            s!(68, -51),
            s!(67, -35),
            s!(63, -78),
            s!(122, -26),
            s!(-16, 57),
            s!(90, -8),
            s!(70, -19),
            s!(131, -53),
            s!(108, -12),
            s!(66, -71),
            s!(53, -1),
            s!(-37, -10),
            s!(71, -35),
            s!(-129, 69),
            s!(-20, -2),
            s!(103, -22),
            s!(-56, 28),
            s!(28, -74),
            s!(-141, 11),
            s!(16, 14),
            s!(-195, -23),
            s!(74, -71),
            s!(139, -119),
            s!(-237, -17),
            s!(-63, 11),
            s!(-79, 81),
        ],
        [
            s!(17, -45),
            s!(135, -29),
            s!(80, -38),
            s!(64, -53),
            s!(2, -16),
            s!(67, -45),
            s!(153, -101),
            s!(53, -21),
            s!(149, -120),
            s!(58, 3),
            s!(95, -27),
            s!(86, -26),
            s!(90, -17),
            s!(72, -26),
            s!(67, -28),
            s!(91, -19),
            s!(82, -5),
            s!(100, -30),
            s!(48, -5),
            s!(87, -8),
            s!(86, -8),
            s!(63, -32),
            s!(113, -16),
            s!(99, -28),
            s!(77, 6),
            s!(69, -36),
            s!(109, -3),
            s!(44, 7),
            s!(23, 24),
            s!(98, -55),
            s!(45, -23),
            s!(104, -23),
            s!(15, 0),
            s!(95, -12),
            s!(29, 5),
            s!(27, 2),
            s!(47, -11),
            s!(-35, 50),
            s!(72, 6),
            s!(69, 1),
            s!(-86, 10),
            s!(86, -20),
            s!(-61, 71),
            s!(26, -1),
            s!(-4, 67),
            s!(-142, 50),
            s!(89, 8),
            s!(41, -15),
            s!(-6, -37),
            s!(-35, 19),
            s!(7, 3),
            s!(-138, 61),
            s!(-154, 64),
            s!(-28, 32),
            s!(-110, 26),
            s!(108, -95),
            s!(39, 35),
            s!(-64, -6),
            s!(-223, 83),
            s!(-149, 10),
            s!(23, 36),
            s!(-222, -34),
            s!(-107, 37),
            s!(146, -113),
        ],
        [
            s!(24, -21),
            s!(25, -6),
            s!(21, -9),
            s!(26, -14),
            s!(38, -15),
            s!(41, -29),
            s!(-18, 10),
            s!(26, -11),
            s!(-5, -56),
            s!(15, -31),
            s!(-1, -33),
            s!(5, -20),
            s!(-34, 7),
            s!(-8, -1),
            s!(26, -18),
            s!(-7, -48),
            s!(7, 9),
            s!(8, -31),
            s!(-18, -12),
            s!(-1, -11),
            s!(26, -27),
            s!(2, -6),
            s!(30, -19),
            s!(6, -7),
            s!(12, -14),
            s!(-64, 56),
            s!(-69, 51),
            s!(67, -33),
            s!(-57, 47),
            s!(35, -4),
            s!(30, -13),
            s!(17, 14),
            s!(-31, -20),
            s!(39, -4),
            s!(80, -15),
            s!(75, -27),
            s!(81, 2),
            s!(10, 42),
            s!(35, 13),
            s!(27, 37),
            s!(71, -35),
            s!(67, -11),
            s!(28, 12),
            s!(56, 28),
            s!(69, 13),
            s!(108, -2),
            s!(87, -26),
            s!(64, -34),
            s!(-22, 36),
            s!(26, 33),
            s!(71, 1),
            s!(42, 24),
            s!(76, 28),
            s!(68, 15),
            s!(-33, 72),
            s!(-28, 46),
            s!(-68, 44),
            s!(-151, 73),
            s!(-226, 80),
            s!(-151, 75),
            s!(-9, 12),
            s!(-11, 22),
            s!(-21, 0),
            s!(-40, 3),
        ],
        [
            s!(-18, -43),
            s!(9, -97),
            s!(36, -131),
            s!(30, -73),
            s!(-14, -23),
            s!(-42, 6),
            s!(-29, -58),
            s!(77, -200),
            s!(-3, 90),
            s!(-23, 21),
            s!(28, -85),
            s!(22, -51),
            s!(21, -74),
            s!(45, -119),
            s!(13, -6),
            s!(91, -193),
            s!(40, -132),
            s!(15, -51),
            s!(23, -15),
            s!(23, -26),
            s!(-12, 0),
            s!(-4, 41),
            s!(6, 49),
            s!(10, -9),
            s!(20, 39),
            s!(-60, 80),
            s!(-7, 7),
            s!(21, 12),
            s!(14, -4),
            s!(-32, 94),
            s!(0, 16),
            s!(-31, 12),
            s!(40, -109),
            s!(6, 30),
            s!(19, 12),
            s!(0, 12),
            s!(-21, 108),
            s!(-24, 25),
            s!(-17, 119),
            s!(33, -15),
            s!(11, -1),
            s!(17, 80),
            s!(2, 52),
            s!(-10, 118),
            s!(6, 107),
            s!(-47, 228),
            s!(10, 96),
            s!(63, 5),
            s!(-90, 177),
            s!(-57, 168),
            s!(33, 56),
            s!(-35, 87),
            s!(-24, 41),
            s!(-1, 94),
            s!(-16, 25),
            s!(83, 27),
            s!(7, -13),
            s!(78, -27),
            s!(21, -9),
            s!(-63, -33),
            s!(17, -38),
            s!(4, 78),
            s!(55, 44),
            s!(16, 44),
        ],
        [
            s!(-81, -20),
            s!(42, -81),
            s!(26, -50),
            s!(-77, -36),
            s!(2, -68),
            s!(-9, -70),
            s!(71, -79),
            s!(73, -117),
            s!(10, -36),
            s!(-96, -13),
            s!(-46, -22),
            s!(-79, 13),
            s!(-122, 39),
            s!(-45, 0),
            s!(-31, -12),
            s!(38, -65),
            s!(-128, 67),
            s!(-151, 31),
            s!(-116, 36),
            s!(-189, 68),
            s!(-137, 28),
            s!(-99, 31),
            s!(-92, 31),
            s!(-33, -7),
            s!(-114, -1),
            s!(-23, 55),
            s!(-139, 60),
            s!(-82, 58),
            s!(-184, 62),
            s!(-121, 57),
            s!(-195, 53),
            s!(-237, 84),
            s!(7, -96),
            s!(21, 32),
            s!(-66, 29),
            s!(-85, 45),
            s!(-6, 26),
            s!(-136, 54),
            s!(-119, 77),
            s!(-52, -51),
            s!(-22, -59),
            s!(97, -72),
            s!(-79, 59),
            s!(57, 32),
            s!(-49, 3),
            s!(142, 16),
            s!(-22, -77),
            s!(-32, -30),
            s!(45, 7),
            s!(117, 75),
            s!(49, 134),
            s!(37, 34),
            s!(50, 133),
            s!(81, 50),
            s!(2, 126),
            s!(-44, -46),
            s!(152, -80),
            s!(106, -20),
            s!(122, -8),
            s!(50, -40),
            s!(104, 28),
            s!(75, -105),
            s!(73, -69),
            s!(72, -76),
        ],
    ]),
};
