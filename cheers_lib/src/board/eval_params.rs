#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_behind_pawn: [i16; 2],
    pub knight_king_distance: [[i16; 2]; 4],
    pub knight_outpost: [[i16; 2]; 2],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_behind_pawn: [i16; 2],
    pub bishop_king_distance: [[i16; 2]; 4],
    pub bishop_outpost: [[i16; 2]; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_long_diagonal: [i16; 2],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_open_file: [[i16; 2]; 2],
    pub rook_on_seventh: [i16; 2],
    pub rook_trapped: [[i16; 2]; 2],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_mobility: [[i16; 2]; 9],
    pub king_defenders: [[i16; 2]; 12],
    pub king_open_file: [[i16; 2]; 2],
    pub no_enemy_queen: [i16; 2],

    // passed pawn terms
    pub passed_pawn: [[i16; 2]; 8],
    pub passed_pawn_advanced: [[i16; 2]; 6],
    pub passed_pawn_unblocked: [i16; 2],
    pub passed_pawn_connected: [i16; 2],
    pub passed_pawn_friendly_rook: [i16; 2],
    pub passed_pawn_enemy_king_too_far: [i16; 2],

    pub double_pawn: [[i16; 2]; 8],
    pub isolated_pawn: [[i16; 2]; 8],
    pub connected_pawn: [[i16; 2]; 8],

    pub tempo: [i16; 2],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(params: [i16; Self::LEN]) -> Self {
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knights_behind_pawns: [i16; 2],
    pub knight_king_distance: [[i16; 2]; 4],
    pub knight_outposts: [[i16; 2]; 2],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishops_behind_pawns: [i16; 2],
    pub bishop_king_distance: [[i16; 2]; 4],
    pub bishop_outposts: [[i16; 2]; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_long_diagonals: [i16; 2],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_open_files: [[i16; 2]; 2],
    pub rooks_on_seventh: [i16; 2],
    pub rook_trapped: [[i16; 2]; 2],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risks: [i16; 2],

    pub king_mobility: [[i16; 2]; 9],
    pub king_defenders: [[i16; 2]; 12],
    pub king_open_file: [[i16; 2]; 2],
    pub no_enemy_queen: [i16; 2],

    pub passed_pawn: [[i16; 2]; 8],
    pub passed_pawn_advanced: [[i16; 2]; 6],
    pub passed_pawn_unblocked: [i16; 2],
    pub passed_pawn_connected: [i16; 2],
    pub passed_pawn_friendly_rook: [i16; 2],
    pub passed_pawn_enemy_king_too_far: [i16; 2],

    pub double_pawn: [[i16; 2]; 8],
    pub isolated_pawn: [[i16; 2]; 8],
    pub connected_pawn: [[i16; 2]; 8],

    pub tempo: [i16; 2],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [39, 112],
        [232, 359],
        [257, 340],
        [350, 583],
        [430, 670],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-114, -186],
        [-64, -67],
        [-42, -21],
        [-36, 10],
        [-26, 23],
        [-19, 45],
        [-10, 51],
        [2, 56],
        [15, 42],
    ],
    knight_behind_pawn: [9, 9],
    knight_king_distance: [[-13, 0], [-9, -14], [-22, -15], [-34, -37]],
    knight_outpost: [[11, -1], [30, 17]],
    bishop_mobility: [
        [-108, -79],
        [-56, -72],
        [-45, -39],
        [-39, -2],
        [-26, 3],
        [-16, 15],
        [-8, 30],
        [-3, 33],
        [0, 40],
        [4, 39],
        [8, 42],
        [35, 18],
        [50, 19],
        [49, 15],
    ],
    bishop_behind_pawn: [12, 19],
    bishop_king_distance: [[-7, 1], [-11, -8], [-11, -12], [-49, 5]],
    bishop_outpost: [[0, 7], [35, 1]],
    bishop_pair: [-6, 84],
    bishop_long_diagonal: [1, -3],
    rook_mobility: [
        [-7, -215],
        [-97, 20],
        [-69, -1],
        [-68, 22],
        [-67, 29],
        [-66, 35],
        [-62, 45],
        [-58, 49],
        [-53, 55],
        [-52, 61],
        [-50, 64],
        [-42, 67],
        [-42, 67],
        [-44, 66],
        [-59, 81],
    ],
    rook_open_file: [[12, 19], [28, 15]],
    rook_on_seventh: [-12, 0],
    rook_trapped: [[-15, 4], [0, -16]],
    queen_mobility: [
        [-40, -1],
        [-244, -86],
        [-32, -149],
        [-35, -104],
        [-47, -113],
        [-53, -29],
        [-46, 19],
        [-48, 6],
        [-44, 17],
        [-43, 32],
        [-40, 46],
        [-34, 49],
        [-32, 60],
        [-28, 63],
        [-22, 55],
        [-26, 65],
        [-19, 65],
        [-15, 52],
        [-22, 59],
        [-11, 53],
        [-1, 34],
        [30, 2],
        [44, -4],
        [56, -23],
        [72, -24],
        [81, -26],
        [32, -24],
        [27, -52],
    ],
    queen_discovery_risk: [-12, 0],
    king_mobility: [
        [-99, 27],
        [-91, 31],
        [-11, 46],
        [-8, -3],
        [15, -11],
        [31, -32],
        [41, -9],
        [25, 0],
        [44, -17],
    ],
    king_defenders: [
        [-49, -7],
        [-23, 1],
        [0, -1],
        [12, 6],
        [22, 6],
        [29, 3],
        [26, -25],
        [-171, -8],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    king_open_file: [[-19, 12], [-60, -6]],
    no_enemy_queen: [344, 355],
    passed_pawn: [
        [5, 2],
        [0, 10],
        [0, 0],
        [-9, 0],
        [-12, -2],
        [-40, 13],
        [-16, 17],
        [4, 10],
    ],
    passed_pawn_advanced: [[-13, -28], [-20, -21], [-16, 8], [5, 12], [21, 9], [32, 21]],
    passed_pawn_unblocked: [-1, 41],
    passed_pawn_connected: [23, -19],
    passed_pawn_friendly_rook: [17, 19],
    passed_pawn_enemy_king_too_far: [-22, 47],
    double_pawn: [
        [-2, -32],
        [12, -10],
        [-25, -9],
        [-4, -74],
        [-34, -17],
        [-35, 2],
        [7, 6],
        [-2, -70],
    ],
    isolated_pawn: [
        [-8, -27],
        [-3, -13],
        [-8, -17],
        [-13, -20],
        [-19, -26],
        [2, -23],
        [-13, -12],
        [-21, -3],
    ],
    connected_pawn: [
        [-2, 5],
        [4, 7],
        [10, 16],
        [4, 23],
        [5, 19],
        [-2, 12],
        [7, 13],
        [6, 4],
    ],
    tempo: [13, 13],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-10, 37],
            [-13, 10],
            [-3, 25],
            [6, 24],
            [4, 58],
            [16, 35],
            [5, 19],
            [0, 0],
            [-21, 29],
            [-21, 13],
            [-25, 18],
            [-10, 23],
            [0, 36],
            [-3, 28],
            [-7, 7],
            [-1, -6],
            [-15, 37],
            [-6, 15],
            [0, 4],
            [2, 8],
            [6, 19],
            [15, 12],
            [-9, 18],
            [9, 6],
            [-6, 64],
            [-5, 32],
            [0, 31],
            [12, 20],
            [28, 31],
            [43, 28],
            [4, 38],
            [17, 32],
            [-4, 111],
            [8, 81],
            [59, 68],
            [50, 56],
            [41, 86],
            [51, 75],
            [21, 63],
            [18, 77],
            [-16, 190],
            [101, 120],
            [87, 132],
            [89, 102],
            [89, 127],
            [59, 140],
            [-1, 117],
            [-87, 164],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-52, 16],
            [-21, -49],
            [-46, -1],
            [-45, -7],
            [-49, -15],
            [-53, -13],
            [-22, -17],
            [-67, -22],
            [-37, 7],
            [-43, 26],
            [-17, -31],
            [-20, -24],
            [-14, -30],
            [-19, -10],
            [-49, -6],
            [-42, -6],
            [-1, -26],
            [-25, -18],
            [-29, -24],
            [-23, -6],
            [-19, 0],
            [-31, -32],
            [-12, -29],
            [-12, -23],
            [-6, 13],
            [-10, -12],
            [7, 3],
            [-19, 15],
            [-10, 13],
            [10, -15],
            [37, -21],
            [-7, -4],
            [29, 16],
            [5, -14],
            [7, 14],
            [44, -10],
            [13, 2],
            [25, 12],
            [24, -3],
            [37, 13],
            [-25, 1],
            [-11, -4],
            [34, -1],
            [38, 1],
            [65, -16],
            [144, -38],
            [56, -8],
            [38, -8],
            [42, -2],
            [21, 4],
            [54, -3],
            [90, -21],
            [126, -25],
            [81, -23],
            [51, -11],
            [56, -28],
            [1, 2],
            [-48, 50],
            [-15, 21],
            [40, 30],
            [37, 9],
            [5, 12],
            [19, -13],
            [13, -39],
        ],
        [
            [16, 7],
            [27, -15],
            [-6, 4],
            [-23, -12],
            [-30, -6],
            [-24, 2],
            [5, -13],
            [-19, 10],
            [5, -31],
            [0, -10],
            [15, -26],
            [-27, 1],
            [-22, 10],
            [1, -22],
            [-5, -5],
            [6, -2],
            [1, 0],
            [17, -7],
            [-13, 10],
            [-8, 5],
            [-9, 16],
            [-27, -2],
            [-7, -17],
            [10, -29],
            [17, 1],
            [-1, -3],
            [-1, 0],
            [10, 18],
            [6, 5],
            [-6, -6],
            [-24, -4],
            [23, -13],
            [5, 8],
            [12, 4],
            [-2, 1],
            [32, 9],
            [23, -5],
            [22, -3],
            [7, -1],
            [-31, 38],
            [25, 11],
            [24, 0],
            [29, 16],
            [12, 6],
            [55, -28],
            [90, 10],
            [66, -12],
            [28, 13],
            [0, 16],
            [8, 5],
            [2, 2],
            [5, 0],
            [34, -16],
            [40, -11],
            [3, -4],
            [27, 25],
            [68, 39],
            [-31, 51],
            [6, 13],
            [-95, 39],
            [-43, 19],
            [-19, 16],
            [36, -21],
            [23, 18],
        ],
        [
            [-39, 14],
            [-34, 1],
            [-33, 7],
            [-25, 2],
            [-21, -3],
            [-23, 5],
            [-14, -2],
            [-28, 0],
            [-54, 9],
            [-61, -9],
            [-32, -2],
            [-37, -13],
            [-24, -11],
            [-21, 5],
            [-15, -19],
            [-43, 6],
            [-36, 9],
            [-43, 9],
            [-55, 10],
            [-53, 6],
            [-3, -28],
            [-24, -9],
            [13, -18],
            [-35, 1],
            [-50, 34],
            [-44, 22],
            [-46, 23],
            [-39, 17],
            [-34, 17],
            [-32, 14],
            [4, -8],
            [-15, 12],
            [-51, 51],
            [-21, 31],
            [-6, 27],
            [11, 14],
            [-8, 20],
            [26, 3],
            [38, 9],
            [-27, 37],
            [-43, 34],
            [-9, 32],
            [12, 37],
            [24, 11],
            [40, 5],
            [58, 12],
            [73, 3],
            [1, 34],
            [-23, 43],
            [-22, 51],
            [0, 51],
            [27, 43],
            [27, 26],
            [58, 14],
            [48, 34],
            [-8, 33],
            [-12, 24],
            [-36, 35],
            [-51, 51],
            [-9, 50],
            [-17, 31],
            [5, 37],
            [10, 52],
            [22, 33],
        ],
        [
            [-26, -5],
            [-32, -18],
            [-40, 5],
            [-27, 0],
            [-15, -29],
            [-36, -52],
            [66, -156],
            [35, -145],
            [-61, 51],
            [-25, -18],
            [-28, 4],
            [-19, -7],
            [-21, -12],
            [-1, -35],
            [-16, -62],
            [2, -65],
            [-21, 5],
            [-26, 18],
            [-30, 33],
            [-34, 18],
            [-41, 40],
            [-23, 29],
            [-4, -5],
            [9, -28],
            [-9, -23],
            [-35, 15],
            [-33, 43],
            [-45, 106],
            [-29, 56],
            [-15, 42],
            [3, 10],
            [-1, 29],
            [-11, -18],
            [-24, 8],
            [0, 26],
            [-34, 86],
            [-18, 83],
            [0, 91],
            [5, 51],
            [-2, 56],
            [-29, 7],
            [-11, 1],
            [2, 39],
            [-17, 35],
            [33, 48],
            [85, 38],
            [80, 25],
            [31, 59],
            [-9, 9],
            [-31, 14],
            [-20, 47],
            [-19, 57],
            [-20, 56],
            [34, 37],
            [1, 58],
            [57, 26],
            [-1, -17],
            [15, -27],
            [47, -9],
            [61, -21],
            [66, 7],
            [137, -81],
            [145, -69],
            [80, -48],
        ],
        [
            [41, -114],
            [22, -55],
            [5, -41],
            [-38, -20],
            [-6, -48],
            [-44, -39],
            [11, -61],
            [58, -126],
            [37, -22],
            [-44, -17],
            [-25, -25],
            [-75, -10],
            [-81, -9],
            [-72, -25],
            [-32, -42],
            [4, -56],
            [-27, 3],
            [-64, -8],
            [-60, 4],
            [-77, 10],
            [-90, 11],
            [-120, 1],
            [-86, -18],
            [-48, -42],
            [-42, 4],
            [-21, 9],
            [-80, 35],
            [-112, 48],
            [-171, 47],
            [-123, 33],
            [-92, 6],
            [-54, -13],
            [64, 21],
            [4, 24],
            [-32, 52],
            [-85, 67],
            [-117, 61],
            [-55, 47],
            [-126, 35],
            [13, -3],
            [107, 11],
            [-1, 57],
            [126, 53],
            [38, 50],
            [20, 57],
            [-39, 56],
            [-52, 41],
            [-30, 18],
            [54, -16],
            [110, 39],
            [94, 64],
            [64, 60],
            [-47, 63],
            [-96, 76],
            [-78, 78],
            [-97, 30],
            [166, -117],
            [167, -6],
            [119, 26],
            [58, 39],
            [24, 43],
            [117, 34],
            [178, 18],
            [76, -98],
        ],
    ]),
};
