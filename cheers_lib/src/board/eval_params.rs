#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 6],
    pub pawn_backward: [EvalScore; 2],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 6],
    pub pawn_backward: [[i16; 2]; 2],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
    ()
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(50, 114),
        s!(401, 187),
        s!(382, 210),
        s!(493, 355),
        s!(996, 640),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-90, -78),
        s!(-65, -37),
        s!(-45, -14),
        s!(-40, 2),
        s!(-27, -2),
        s!(-23, 8),
        s!(-16, 5),
        s!(-7, 7),
        s!(1, 0),
    ],
    knight_outpost: [s!(-33, -13), s!(-23, -22), s!(-10, -7)],
    bishop_mobility: [
        s!(-41, -29),
        s!(-50, -12),
        s!(-34, -10),
        s!(-22, 0),
        s!(-14, 5),
        s!(-7, 12),
        s!(-2, 17),
        s!(0, 18),
        s!(6, 20),
        s!(9, 18),
        s!(17, 18),
        s!(27, 10),
        s!(31, 20),
        s!(35, 4),
    ],
    bishop_outpost: [s!(-39, -28), s!(-33, -32), s!(-6, -34)],
    rook_mobility: [
        s!(-68, -103),
        s!(-63, -40),
        s!(-15, -23),
        s!(-10, -6),
        s!(-9, -3),
        s!(-5, -3),
        s!(-5, 2),
        s!(0, 3),
        s!(1, 7),
        s!(7, 6),
        s!(10, 10),
        s!(13, 12),
        s!(19, 15),
        s!(17, 16),
        s!(44, 2),
    ],
    rook_on_open_file: [s!(-20, -10), s!(-9, 0), s!(9, -14)],
    queen_mobility: [
        s!(0, 0),
        s!(-63, -79),
        s!(-122, -4),
        s!(-48, -114),
        s!(-34, -55),
        s!(-27, -73),
        s!(-22, -50),
        s!(-20, -29),
        s!(-19, -4),
        s!(-14, -15),
        s!(-15, 11),
        s!(-12, 9),
        s!(-7, 16),
        s!(-5, 16),
        s!(-3, 21),
        s!(-2, 25),
        s!(-6, 36),
        s!(1, 31),
        s!(-5, 42),
        s!(-9, 47),
        s!(2, 40),
        s!(10, 41),
        s!(-4, 44),
        s!(50, 5),
        s!(96, -13),
        s!(18, 24),
        s!(128, -41),
        s!(476, -215),
    ],
    queen_discovery_risk: s!(-15, 12),
    king_on_open_file: [s!(14, 5), s!(0, 17), s!(-24, 9)],
    king_ring_attacks: [
        s!(48, -17),
        s!(44, -13),
        s!(34, -8),
        s!(19, -11),
        s!(-24, 7),
        s!(-119, 52),
        s!(-151, 65),
        s!(-182, 74),
        s!(-334, 115),
        s!(-324, 110),
        s!(7, 162),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(32, 63),
        s!(26, -5),
        s!(34, -7),
        s!(33, -9),
        s!(15, 4),
        s!(10, 0),
        s!(0, 0),
        s!(-5, 4),
        s!(-9, 3),
        s!(-10, 2),
        s!(-12, 4),
        s!(-16, 4),
        s!(-21, 5),
        s!(-26, 7),
        s!(-26, 4),
        s!(-38, 6),
        s!(-36, 3),
        s!(-24, -1),
        s!(-10, -7),
        s!(-10, -9),
        s!(-3, -13),
        s!(-3, -17),
        s!(-35, -17),
        s!(-20, -21),
        s!(-19, -25),
        s!(-79, -18),
        s!(-15, -32),
    ],
    king_discovery_risk: s!(-13, -3),
    pawn_connected: [s!(-14, -14), s!(0, -3), s!(15, 2)],
    pawn_phalanx: [s!(0, 5), s!(6, 8), s!(6, -1)],
    pawn_isolated: [s!(10, 12), s!(6, 12)],
    pawn_doubled: [
        s!(0, 3),
        s!(0, -7),
        s!(0, -29),
        s!(0, 90),
        s!(0, 0),
        s!(0, 0),
    ],
    pawn_backward: [s!(6, 16), s!(0, 12)],
    passed_pawn_friendly_king_distance: [s!(-6, 10), s!(-9, 2), s!(-13, -9), s!(-14, -13)],
    passed_pawn_enemy_king_distance: [s!(5, -32), s!(24, -10), s!(1, 11), s!(-6, 24)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(20, -13),
        s!(15, -1),
        s!(14, -21),
        s!(2, -35),
        s!(10, -22),
        s!(17, -24),
        s!(50, -20),
        s!(18, -18),
        s!(24, -6),
        s!(23, -1),
        s!(20, -12),
        s!(-6, -12),
        s!(14, -16),
        s!(19, -6),
        s!(23, 0),
        s!(31, -11),
        s!(26, 15),
        s!(18, 15),
        s!(1, 14),
        s!(5, 10),
        s!(-7, 11),
        s!(-19, 21),
        s!(-36, 31),
        s!(14, 17),
        s!(29, 34),
        s!(28, 40),
        s!(14, 30),
        s!(0, 33),
        s!(4, 29),
        s!(20, 32),
        s!(16, 42),
        s!(-9, 39),
        s!(41, 80),
        s!(27, 65),
        s!(16, 46),
        s!(18, 26),
        s!(0, 41),
        s!(-15, 71),
        s!(-29, 67),
        s!(-53, 92),
        s!(69, -16),
        s!(86, -8),
        s!(14, 64),
        s!(33, 0),
        s!(15, -3),
        s!(13, 34),
        s!(8, 79),
        s!(-20, 62),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-3, -69),
            s!(5, -73),
            s!(4, -65),
            s!(6, -62),
            s!(4, -66),
            s!(30, -72),
            s!(31, -82),
            s!(11, -84),
            s!(-7, -76),
            s!(-10, -78),
            s!(-1, -76),
            s!(0, -70),
            s!(4, -73),
            s!(0, -77),
            s!(12, -86),
            s!(0, -84),
            s!(-4, -73),
            s!(-8, -72),
            s!(7, -81),
            s!(14, -84),
            s!(12, -80),
            s!(18, -85),
            s!(1, -81),
            s!(-12, -82),
            s!(6, -61),
            s!(1, -66),
            s!(4, -67),
            s!(18, -76),
            s!(19, -76),
            s!(21, -76),
            s!(1, -69),
            s!(3, -71),
            s!(2, -45),
            s!(5, -34),
            s!(18, -25),
            s!(8, -19),
            s!(34, -39),
            s!(76, -64),
            s!(31, -42),
            s!(25, -57),
            s!(0, 89),
            s!(6, 74),
            s!(21, 8),
            s!(19, 49),
            s!(64, 44),
            s!(66, 15),
            s!(35, 2),
            s!(19, 9),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-33, -7),
            s!(-2, -5),
            s!(-29, 3),
            s!(-20, 8),
            s!(-14, 0),
            s!(-17, 7),
            s!(-7, -6),
            s!(-38, 10),
            s!(-6, -9),
            s!(-16, 0),
            s!(-5, -4),
            s!(3, 3),
            s!(4, 2),
            s!(-2, 1),
            s!(5, -3),
            s!(4, -5),
            s!(-14, -3),
            s!(-9, 6),
            s!(-5, 3),
            s!(-7, 20),
            s!(2, 16),
            s!(1, 3),
            s!(11, -5),
            s!(-10, -6),
            s!(-2, 2),
            s!(-7, 8),
            s!(-2, 20),
            s!(-2, 22),
            s!(4, 24),
            s!(11, 11),
            s!(0, 1),
            s!(-4, 7),
            s!(5, 4),
            s!(4, 10),
            s!(-9, 19),
            s!(22, 24),
            s!(-2, 24),
            s!(11, 21),
            s!(-11, 14),
            s!(24, -3),
            s!(-21, -1),
            s!(-13, 2),
            s!(-20, 25),
            s!(9, 21),
            s!(22, 7),
            s!(55, 3),
            s!(9, -3),
            s!(-22, 3),
            s!(-59, 4),
            s!(-41, 12),
            s!(34, -6),
            s!(-1, 8),
            s!(41, -9),
            s!(28, -10),
            s!(0, -2),
            s!(-9, -13),
            s!(-196, 34),
            s!(-40, -25),
            s!(-56, 6),
            s!(-66, 11),
            s!(-2, 0),
            s!(-87, 5),
            s!(-89, -5),
            s!(-106, -19),
        ],
        [
            s!(56, -14),
            s!(36, -3),
            s!(48, -13),
            s!(37, -1),
            s!(32, -2),
            s!(26, 2),
            s!(49, -18),
            s!(60, -14),
            s!(34, 0),
            s!(59, -11),
            s!(47, -8),
            s!(43, 0),
            s!(45, 0),
            s!(52, -6),
            s!(69, -11),
            s!(53, -10),
            s!(52, -10),
            s!(47, -1),
            s!(46, 1),
            s!(42, 6),
            s!(48, 5),
            s!(52, -1),
            s!(43, -10),
            s!(53, -8),
            s!(29, -5),
            s!(25, 0),
            s!(34, 6),
            s!(44, 4),
            s!(50, 4),
            s!(37, 5),
            s!(39, -7),
            s!(26, -3),
            s!(9, 7),
            s!(29, 4),
            s!(27, 5),
            s!(27, 12),
            s!(36, 9),
            s!(16, 5),
            s!(39, -2),
            s!(23, -2),
            s!(12, 4),
            s!(19, 2),
            s!(47, 0),
            s!(11, 13),
            s!(54, 0),
            s!(44, 9),
            s!(40, 0),
            s!(41, -2),
            s!(0, 0),
            s!(18, 0),
            s!(7, 1),
            s!(17, -5),
            s!(14, 3),
            s!(57, -9),
            s!(7, 5),
            s!(42, -22),
            s!(-2, 0),
            s!(-23, -4),
            s!(4, -5),
            s!(-18, 3),
            s!(-56, 7),
            s!(0, -1),
            s!(21, -7),
            s!(-20, 5),
        ],
        [
            s!(-1, 1),
            s!(0, -1),
            s!(4, -2),
            s!(5, -1),
            s!(6, -8),
            s!(0, -6),
            s!(-13, -6),
            s!(10, -21),
            s!(-16, -4),
            s!(-11, -4),
            s!(-14, 0),
            s!(-3, -5),
            s!(0, -7),
            s!(-1, -8),
            s!(11, -13),
            s!(-28, -6),
            s!(-18, -3),
            s!(-15, -1),
            s!(-10, -3),
            s!(1, -7),
            s!(0, -7),
            s!(5, -13),
            s!(12, -18),
            s!(8, -17),
            s!(-21, 2),
            s!(-31, 5),
            s!(-28, 7),
            s!(-19, 6),
            s!(-16, 3),
            s!(-11, -1),
            s!(0, -8),
            s!(-1, -12),
            s!(-24, 6),
            s!(-5, 0),
            s!(0, 4),
            s!(8, 0),
            s!(-7, 2),
            s!(10, -1),
            s!(15, -5),
            s!(14, -7),
            s!(-5, 4),
            s!(-5, 5),
            s!(-11, 5),
            s!(15, 0),
            s!(23, -6),
            s!(32, -7),
            s!(57, -13),
            s!(29, -10),
            s!(-17, 9),
            s!(-32, 21),
            s!(-6, 12),
            s!(18, 4),
            s!(-10, 5),
            s!(36, -4),
            s!(44, -6),
            s!(19, -4),
            s!(0, 11),
            s!(12, 5),
            s!(10, 8),
            s!(9, 3),
            s!(43, -5),
            s!(78, -16),
            s!(67, -13),
            s!(2, 2),
        ],
        [
            s!(31, -35),
            s!(21, -31),
            s!(23, -32),
            s!(28, -43),
            s!(22, -30),
            s!(4, -33),
            s!(0, -29),
            s!(47, -61),
            s!(19, -19),
            s!(23, -24),
            s!(23, -22),
            s!(26, -20),
            s!(29, -25),
            s!(30, -46),
            s!(32, -51),
            s!(27, -26),
            s!(12, -38),
            s!(21, -37),
            s!(11, 3),
            s!(17, -12),
            s!(15, 0),
            s!(21, -7),
            s!(20, 2),
            s!(18, -13),
            s!(19, -25),
            s!(5, -2),
            s!(8, -1),
            s!(0, 20),
            s!(10, 12),
            s!(17, 0),
            s!(21, 1),
            s!(16, -8),
            s!(-1, -20),
            s!(4, 5),
            s!(-3, 3),
            s!(-9, 31),
            s!(0, 37),
            s!(5, 33),
            s!(4, 21),
            s!(23, 0),
            s!(-5, -20),
            s!(-7, -7),
            s!(10, 11),
            s!(6, 12),
            s!(28, 35),
            s!(26, 11),
            s!(67, -22),
            s!(16, 0),
            s!(-16, 3),
            s!(-27, 5),
            s!(-32, 22),
            s!(-53, 62),
            s!(-54, 51),
            s!(37, 34),
            s!(-13, 42),
            s!(88, -52),
            s!(-15, -3),
            s!(-12, 8),
            s!(21, -6),
            s!(10, 13),
            s!(71, -25),
            s!(48, -3),
            s!(1, -6),
            s!(-11, 25),
        ],
        [
            s!(-72, -10),
            s!(-2, -11),
            s!(-15, 1),
            s!(-43, 8),
            s!(-12, -4),
            s!(-42, 6),
            s!(5, -17),
            s!(-18, -30),
            s!(1, -19),
            s!(-20, 5),
            s!(-25, 15),
            s!(-46, 24),
            s!(-37, 22),
            s!(-29, 20),
            s!(9, 4),
            s!(-6, -9),
            s!(1, -23),
            s!(25, -4),
            s!(-30, 19),
            s!(-44, 28),
            s!(-39, 27),
            s!(-24, 21),
            s!(-1, 5),
            s!(-33, -3),
            s!(20, -31),
            s!(29, -8),
            s!(9, 12),
            s!(-33, 28),
            s!(-29, 29),
            s!(-47, 23),
            s!(-14, 4),
            s!(-62, -3),
            s!(-1, -26),
            s!(18, -2),
            s!(33, 10),
            s!(10, 23),
            s!(-3, 24),
            s!(0, 20),
            s!(20, 6),
            s!(-26, -3),
            s!(33, -21),
            s!(122, -7),
            s!(41, 9),
            s!(67, 7),
            s!(7, 17),
            s!(66, 17),
            s!(75, 9),
            s!(2, -1),
            s!(16, -19),
            s!(96, -4),
            s!(71, -2),
            s!(50, -1),
            s!(53, 1),
            s!(85, 6),
            s!(19, 14),
            s!(-22, 0),
            s!(70, -52),
            s!(44, -20),
            s!(83, -24),
            s!(47, -13),
            s!(68, -16),
            s!(68, -12),
            s!(45, -14),
            s!(15, -29),
        ],
    ]),
};
