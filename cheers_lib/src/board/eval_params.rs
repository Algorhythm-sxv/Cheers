#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 5],
    pub pawn_backward: [EvalScore; 2],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 5],
    pub pawn_backward: [[i16; 2]; 2],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
    ()
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(50, 112),
        s!(399, 186),
        s!(379, 209),
        s!(487, 352),
        s!(983, 633),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-89, -78),
        s!(-65, -37),
        s!(-45, -14),
        s!(-41, 1),
        s!(-28, -3),
        s!(-23, 7),
        s!(-17, 5),
        s!(-8, 6),
        s!(0, -1),
    ],
    knight_outpost: [s!(-34, -13), s!(-24, -22), s!(-11, -7)],
    bishop_mobility: [
        s!(-41, -29),
        s!(-50, -12),
        s!(-34, -11),
        s!(-22, 0),
        s!(-15, 4),
        s!(-8, 11),
        s!(-3, 16),
        s!(0, 17),
        s!(5, 19),
        s!(8, 17),
        s!(16, 17),
        s!(26, 9),
        s!(29, 19),
        s!(34, 3),
    ],
    bishop_outpost: [s!(-40, -28), s!(-34, -32), s!(-7, -34)],
    rook_mobility: [
        s!(-69, -97),
        s!(-62, -40),
        s!(-15, -24),
        s!(-11, -7),
        s!(-10, -4),
        s!(-6, -5),
        s!(-5, 1),
        s!(-1, 2),
        s!(0, 5),
        s!(6, 4),
        s!(9, 8),
        s!(12, 10),
        s!(18, 13),
        s!(16, 15),
        s!(44, 1),
    ],
    rook_on_open_file: [s!(-21, -11), s!(-10, -1), s!(8, -14)],
    queen_mobility: [
        s!(0, 0),
        s!(-37, -223),
        s!(-120, -9),
        s!(-48, -114),
        s!(-34, -55),
        s!(-27, -73),
        s!(-22, -50),
        s!(-20, -30),
        s!(-19, -5),
        s!(-15, -16),
        s!(-16, 10),
        s!(-13, 8),
        s!(-8, 15),
        s!(-6, 15),
        s!(-4, 20),
        s!(-2, 24),
        s!(-6, 34),
        s!(1, 30),
        s!(-6, 40),
        s!(-10, 46),
        s!(2, 38),
        s!(9, 39),
        s!(-4, 42),
        s!(49, 4),
        s!(96, -15),
        s!(17, 23),
        s!(114, -35),
        s!(541, -250),
    ],
    queen_discovery_risk: s!(-15, 12),
    king_on_open_file: [s!(13, 4), s!(0, 16), s!(-24, 9)],
    king_ring_attacks: [
        s!(49, -21),
        s!(45, -16),
        s!(35, -12),
        s!(20, -14),
        s!(-22, 3),
        s!(-117, 47),
        s!(-148, 60),
        s!(-177, 68),
        s!(-456, 233),
        s!(-400, 272),
        s!(-83, 312),
        s!(-79, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(138, 36),
        s!(26, -4),
        s!(34, -7),
        s!(32, -9),
        s!(15, 4),
        s!(9, 0),
        s!(0, 0),
        s!(-5, 4),
        s!(-9, 3),
        s!(-10, 2),
        s!(-12, 4),
        s!(-16, 4),
        s!(-20, 5),
        s!(-26, 7),
        s!(-26, 4),
        s!(-38, 6),
        s!(-35, 3),
        s!(-24, -1),
        s!(-10, -6),
        s!(-10, -9),
        s!(-3, -13),
        s!(-3, -17),
        s!(-35, -17),
        s!(-20, -20),
        s!(-19, -25),
        s!(-78, -18),
        s!(-15, -31),
    ],
    king_discovery_risk: s!(-13, -3),
    pawn_connected: [s!(-14, -14), s!(0, -3), s!(14, 1)],
    pawn_phalanx: [s!(0, 4), s!(6, 7), s!(6, -2)],
    pawn_isolated: [s!(9, 11), s!(6, 11)],
    pawn_doubled: [s!(0, -2), s!(0, 2), s!(0, -2), s!(0, -18), s!(0, 113)],
    pawn_backward: [s!(6, 15), s!(0, 11)],
    passed_pawn_friendly_king_distance: [s!(-6, 10), s!(-8, 2), s!(-13, -9), s!(-14, -13)],
    passed_pawn_enemy_king_distance: [s!(4, -31), s!(23, -10), s!(1, 11), s!(-6, 24)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(19, -12),
        s!(15, -1),
        s!(13, -20),
        s!(2, -34),
        s!(9, -21),
        s!(17, -23),
        s!(48, -19),
        s!(17, -17),
        s!(23, -6),
        s!(22, 0),
        s!(19, -12),
        s!(-6, -12),
        s!(13, -16),
        s!(18, -6),
        s!(23, 0),
        s!(31, -10),
        s!(25, 15),
        s!(18, 15),
        s!(1, 14),
        s!(5, 10),
        s!(-7, 11),
        s!(-19, 21),
        s!(-36, 31),
        s!(13, 17),
        s!(29, 34),
        s!(28, 40),
        s!(14, 30),
        s!(0, 33),
        s!(4, 29),
        s!(20, 31),
        s!(16, 41),
        s!(-10, 39),
        s!(40, 79),
        s!(26, 64),
        s!(15, 46),
        s!(18, 26),
        s!(0, 41),
        s!(-15, 70),
        s!(-29, 66),
        s!(-53, 91),
        s!(67, -14),
        s!(85, -7),
        s!(13, 64),
        s!(32, 0),
        s!(15, -3),
        s!(13, 33),
        s!(7, 78),
        s!(-21, 63),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-3, -69),
            s!(4, -73),
            s!(4, -65),
            s!(5, -62),
            s!(4, -66),
            s!(29, -72),
            s!(30, -82),
            s!(11, -84),
            s!(-7, -76),
            s!(-10, -78),
            s!(-1, -76),
            s!(0, -70),
            s!(4, -73),
            s!(0, -77),
            s!(12, -86),
            s!(0, -84),
            s!(-4, -73),
            s!(-7, -72),
            s!(7, -81),
            s!(14, -83),
            s!(12, -80),
            s!(17, -85),
            s!(1, -81),
            s!(-12, -82),
            s!(6, -61),
            s!(1, -66),
            s!(4, -67),
            s!(18, -76),
            s!(19, -76),
            s!(21, -76),
            s!(1, -69),
            s!(3, -71),
            s!(2, -46),
            s!(5, -34),
            s!(17, -25),
            s!(7, -20),
            s!(34, -39),
            s!(75, -64),
            s!(31, -42),
            s!(25, -57),
            s!(1, 85),
            s!(6, 72),
            s!(22, 6),
            s!(19, 47),
            s!(63, 42),
            s!(66, 13),
            s!(34, 1),
            s!(19, 6),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-34, -7),
            s!(-3, -5),
            s!(-29, 2),
            s!(-21, 8),
            s!(-14, 0),
            s!(-17, 6),
            s!(-8, -6),
            s!(-38, 9),
            s!(-7, -10),
            s!(-17, 0),
            s!(-5, -4),
            s!(2, 2),
            s!(3, 1),
            s!(-3, 1),
            s!(4, -4),
            s!(3, -6),
            s!(-15, -3),
            s!(-10, 5),
            s!(-5, 3),
            s!(-8, 19),
            s!(1, 15),
            s!(0, 2),
            s!(10, -6),
            s!(-10, -6),
            s!(-3, 2),
            s!(-7, 7),
            s!(-3, 19),
            s!(-3, 22),
            s!(3, 23),
            s!(10, 10),
            s!(-1, 0),
            s!(-5, 7),
            s!(4, 3),
            s!(3, 9),
            s!(-9, 18),
            s!(21, 23),
            s!(-3, 24),
            s!(10, 20),
            s!(-12, 13),
            s!(22, -3),
            s!(-21, -1),
            s!(-14, 1),
            s!(-21, 25),
            s!(8, 20),
            s!(21, 6),
            s!(53, 2),
            s!(8, -3),
            s!(-22, 3),
            s!(-59, 4),
            s!(-41, 11),
            s!(33, -7),
            s!(-2, 7),
            s!(39, -9),
            s!(27, -10),
            s!(0, -2),
            s!(-9, -13),
            s!(-194, 33),
            s!(-40, -25),
            s!(-56, 5),
            s!(-66, 11),
            s!(-3, 0),
            s!(-86, 4),
            s!(-88, -6),
            s!(-105, -20),
        ],
        [
            s!(54, -14),
            s!(35, -3),
            s!(46, -13),
            s!(36, -1),
            s!(31, -2),
            s!(25, 2),
            s!(48, -18),
            s!(58, -14),
            s!(32, 0),
            s!(57, -11),
            s!(45, -8),
            s!(41, 0),
            s!(44, 0),
            s!(51, -6),
            s!(68, -11),
            s!(52, -10),
            s!(51, -10),
            s!(46, -2),
            s!(45, 0),
            s!(41, 5),
            s!(46, 5),
            s!(50, -2),
            s!(41, -11),
            s!(52, -8),
            s!(28, -5),
            s!(24, -1),
            s!(33, 5),
            s!(42, 4),
            s!(48, 3),
            s!(36, 5),
            s!(37, -7),
            s!(25, -4),
            s!(8, 6),
            s!(27, 4),
            s!(26, 5),
            s!(26, 12),
            s!(35, 8),
            s!(15, 5),
            s!(38, -2),
            s!(22, -2),
            s!(11, 4),
            s!(18, 2),
            s!(46, 0),
            s!(10, 13),
            s!(52, 0),
            s!(43, 8),
            s!(38, 0),
            s!(40, -2),
            s!(0, 0),
            s!(17, 0),
            s!(6, 1),
            s!(16, -5),
            s!(13, 2),
            s!(55, -9),
            s!(6, 5),
            s!(40, -22),
            s!(-3, 0),
            s!(-24, -5),
            s!(3, -5),
            s!(-19, 3),
            s!(-56, 6),
            s!(-1, -1),
            s!(20, -7),
            s!(-21, 4),
        ],
        [
            s!(-2, 0),
            s!(-1, -2),
            s!(3, -3),
            s!(4, -2),
            s!(6, -8),
            s!(-1, -7),
            s!(-14, -7),
            s!(10, -22),
            s!(-16, -5),
            s!(-11, -5),
            s!(-14, 0),
            s!(-4, -5),
            s!(0, -8),
            s!(-2, -8),
            s!(10, -14),
            s!(-28, -6),
            s!(-19, -4),
            s!(-15, -2),
            s!(-10, -3),
            s!(0, -7),
            s!(0, -8),
            s!(4, -13),
            s!(12, -19),
            s!(7, -17),
            s!(-21, 1),
            s!(-31, 4),
            s!(-28, 6),
            s!(-20, 5),
            s!(-16, 2),
            s!(-11, -2),
            s!(0, -9),
            s!(-1, -12),
            s!(-24, 5),
            s!(-6, 0),
            s!(-1, 3),
            s!(8, -1),
            s!(-7, 1),
            s!(10, -2),
            s!(14, -6),
            s!(13, -8),
            s!(-5, 3),
            s!(-6, 4),
            s!(-12, 4),
            s!(14, -1),
            s!(23, -6),
            s!(31, -7),
            s!(56, -13),
            s!(28, -11),
            s!(-17, 9),
            s!(-32, 19),
            s!(-6, 11),
            s!(17, 3),
            s!(-11, 4),
            s!(35, -5),
            s!(43, -6),
            s!(18, -5),
            s!(0, 10),
            s!(12, 4),
            s!(9, 7),
            s!(8, 2),
            s!(42, -5),
            s!(76, -16),
            s!(66, -13),
            s!(1, 1),
        ],
        [
            s!(30, -35),
            s!(20, -32),
            s!(22, -32),
            s!(27, -44),
            s!(21, -31),
            s!(3, -33),
            s!(0, -30),
            s!(46, -61),
            s!(18, -20),
            s!(22, -25),
            s!(22, -23),
            s!(25, -21),
            s!(28, -26),
            s!(29, -47),
            s!(30, -52),
            s!(26, -27),
            s!(11, -39),
            s!(20, -38),
            s!(10, 1),
            s!(16, -14),
            s!(14, -2),
            s!(20, -8),
            s!(19, 0),
            s!(17, -14),
            s!(18, -26),
            s!(4, -3),
            s!(7, -3),
            s!(0, 19),
            s!(9, 10),
            s!(16, 0),
            s!(20, 0),
            s!(15, -9),
            s!(-2, -21),
            s!(3, 3),
            s!(-4, 1),
            s!(-10, 29),
            s!(0, 35),
            s!(4, 32),
            s!(3, 19),
            s!(22, -2),
            s!(-5, -21),
            s!(-8, -8),
            s!(9, 10),
            s!(5, 10),
            s!(26, 33),
            s!(25, 10),
            s!(65, -23),
            s!(15, 0),
            s!(-16, 1),
            s!(-28, 4),
            s!(-32, 20),
            s!(-53, 59),
            s!(-54, 49),
            s!(36, 32),
            s!(-14, 40),
            s!(86, -52),
            s!(-15, -5),
            s!(-13, 7),
            s!(21, -7),
            s!(9, 12),
            s!(69, -26),
            s!(47, -4),
            s!(1, -7),
            s!(-11, 23),
        ],
        [
            s!(-71, -10),
            s!(-2, -11),
            s!(-15, 1),
            s!(-42, 8),
            s!(-12, -4),
            s!(-41, 6),
            s!(5, -16),
            s!(-18, -30),
            s!(1, -18),
            s!(-20, 5),
            s!(-25, 15),
            s!(-45, 24),
            s!(-37, 22),
            s!(-28, 19),
            s!(9, 4),
            s!(-6, -9),
            s!(1, -23),
            s!(25, -4),
            s!(-30, 19),
            s!(-43, 27),
            s!(-39, 27),
            s!(-24, 20),
            s!(-1, 5),
            s!(-33, -3),
            s!(20, -30),
            s!(28, -8),
            s!(9, 12),
            s!(-32, 28),
            s!(-28, 29),
            s!(-47, 23),
            s!(-14, 4),
            s!(-61, -3),
            s!(-1, -25),
            s!(18, -2),
            s!(33, 10),
            s!(10, 23),
            s!(-3, 23),
            s!(0, 20),
            s!(19, 6),
            s!(-25, -3),
            s!(32, -21),
            s!(120, -7),
            s!(40, 9),
            s!(66, 7),
            s!(7, 17),
            s!(65, 16),
            s!(74, 9),
            s!(2, -1),
            s!(16, -19),
            s!(94, -4),
            s!(70, -2),
            s!(49, -1),
            s!(52, 1),
            s!(83, 6),
            s!(18, 14),
            s!(-22, 0),
            s!(68, -51),
            s!(43, -19),
            s!(82, -24),
            s!(46, -13),
            s!(67, -15),
            s!(67, -11),
            s!(45, -14),
            s!(14, -29),
        ],
    ]),
};
