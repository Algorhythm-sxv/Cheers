#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::*;

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [EvalScore; 9],
    pub knight_outpost: [EvalScore; 3],
    pub knight_behind_pawn: EvalScore,
    pub knight_threats: [EvalScore; 6],

    pub bishop_mobility: [EvalScore; 14],
    pub bishop_outpost: [EvalScore; 3],
    pub bishop_behind_pawn: EvalScore,
    pub bishop_pair: EvalScore,
    pub bishop_threats: [EvalScore; 6],

    pub rook_mobility: [EvalScore; 15],
    pub rook_on_open_file: [EvalScore; 3],
    pub rook_queen_file: EvalScore,
    pub rook_threats: [EvalScore; 6],

    pub queen_mobility: [EvalScore; 28],
    pub queen_discovery_risk: EvalScore,

    pub king_on_open_file: [EvalScore; 3],
    pub king_ring_attacks: [EvalScore; 16],
    pub king_virtual_mobility: [EvalScore; 28],
    pub king_discovery_risk: EvalScore,

    pub pawn_connected: [EvalScore; 3],
    pub pawn_phalanx: [EvalScore; 3],
    pub pawn_isolated: [EvalScore; 2],
    pub pawn_doubled: [EvalScore; 5],
    pub pawn_backward: [EvalScore; 2],
    pub pawn_threats: [EvalScore; 6],

    pub passed_pawn_friendly_king_distance: [EvalScore; 4],
    pub passed_pawn_enemy_king_distance: [EvalScore; 4],
    pub passed_pawn_table: [EvalScore; 64],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn to_array(&mut self) -> [i16; Self::LEN] {
        let array = &mut bytemuck::cast::<EvalParams, [i16; Self::LEN]>(*self);
        array
            .chunks_exact_mut(2)
            .for_each(|p| EvalScore::convert(p));
        *array
    }
    pub fn as_array(&self) -> &[i16; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i16; Self::LEN]>(self)
    }
    pub fn from_array(mut params: [i16; Self::LEN]) -> Self {
        params.chunks_exact_mut(2).for_each(|p| {
            let score = EvalScore::new(p[0], p[1]);
            p[1] = (score.inner() >> 16) as i16;
            p[0] = score.inner() as i16;
        });
        bytemuck::cast::<[i16; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i16; 2],
    pub knight_count: [i16; 2],
    pub bishop_count: [i16; 2],
    pub rook_count: [i16; 2],
    pub queen_count: [i16; 2],
    // pads to the length of PieceValues
    pub king_count: [i16; 2],

    pub knight_mobility: [[i16; 2]; 9],
    pub knight_outpost: [[i16; 2]; 3],
    pub knight_beind_pawn: [i16; 2],
    pub knight_threats: [[i16; 2]; 6],

    pub bishop_mobility: [[i16; 2]; 14],
    pub bishop_outpost: [[i16; 2]; 3],
    pub bishop_beind_pawn: [i16; 2],
    pub bishop_pair: [i16; 2],
    pub bishop_threats: [[i16; 2]; 6],

    pub rook_mobility: [[i16; 2]; 15],
    pub rook_on_open_file: [[i16; 2]; 3],
    pub rook_queen_file: [i16; 2],
    pub rook_threats: [[i16; 2]; 6],

    pub queen_mobility: [[i16; 2]; 28],
    pub queen_discovery_risk: [i16; 2],

    pub king_on_open_file: [[i16; 2]; 3],
    pub king_ring_attacks: [[i16; 2]; 16],
    pub king_virtual_mobility: [[i16; 2]; 28],
    pub king_discovery_risk: [i16; 2],

    pub pawn_connected: [[i16; 2]; 3],
    pub pawn_phalanx: [[i16; 2]; 3],
    pub pawn_isolated: [[i16; 2]; 2],
    pub pawn_doubled: [[i16; 2]; 5],
    pub pawn_backward: [[i16; 2]; 2],
    pub pawn_threats: [[i16; 2]; 6],

    pub passed_pawn_friendly_king_distance: [[i16; 2]; 4],
    pub passed_pawn_enemy_king_distance: [[i16; 2]; 4],
    pub passed_pawn_placement: [[i16; 2]; 64],

    pub pawn_placement: [[i16; 2]; 64],
    pub knight_placement: [[i16; 2]; 64],
    pub bishop_placement: [[i16; 2]; 64],
    pub rook_placement: [[i16; 2]; 64],
    pub queen_placement: [[i16; 2]; 64],
    pub king_placement: [[i16; 2]; 64],

    pub turn: i16,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i16>();
    pub fn new() -> Self {
        bytemuck::cast::<[i16; Self::LEN], Self>([0i16; Self::LEN])
    }
    pub fn to_array(&self) -> [i16; Self::LEN] {
        bytemuck::cast::<Self, [i16; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

// static assert that eval params and trace are the same length (plus 1 for turn in trace)
#[cfg(feature = "eval-tracing")]
const _PARAMS_TRACE_LEN_EQ: () = if EvalParams::LEN + 1 == EvalTrace::LEN {
    ()
} else {
    panic!("Eval parameters and trace are not equal length!")
};

pub const CHECKMATE_SCORE: i16 = 30000;
pub const DRAW_SCORE: i16 = 0;

pub static EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        s!(46, 108),
        s!(374, 174),
        s!(343, 194),
        s!(444, 325),
        s!(897, 584),
        s!(0, 0),
    ]),
    knight_mobility: [
        s!(-87, -76),
        s!(-64, -37),
        s!(-45, -18),
        s!(-40, -3),
        s!(-29, -7),
        s!(-25, 2),
        s!(-20, 1),
        s!(-13, 3),
        s!(-6, -2),
    ],
    knight_outpost: [s!(-41, -15), s!(-37, -21), s!(-24, -7)],
    knight_behind_pawn: s!(6, 5),
    knight_threats: [
        s!(-4, 5),
        s!(0, 0),
        s!(5, 22),
        s!(28, 3),
        s!(1, -4),
        s!(74, -17),
    ],
    bishop_mobility: [
        s!(-47, -40),
        s!(-51, -20),
        s!(-35, -18),
        s!(-25, -8),
        s!(-19, -2),
        s!(-13, 4),
        s!(-9, 9),
        s!(-5, 10),
        s!(-1, 14),
        s!(1, 13),
        s!(6, 15),
        s!(15, 9),
        s!(21, 19),
        s!(25, 6),
    ],
    bishop_outpost: [s!(-57, -30), s!(-52, -33), s!(-28, -31)],
    bishop_behind_pawn: s!(6, 3),
    bishop_pair: s!(24, 29),
    bishop_threats: [
        s!(0, 8),
        s!(13, 12),
        s!(0, 0),
        s!(13, -4),
        s!(17, -6),
        s!(34, 15),
    ],
    rook_mobility: [
        s!(-86, -66),
        s!(-57, -46),
        s!(-16, -29),
        s!(-11, -13),
        s!(-11, -9),
        s!(-8, -10),
        s!(-7, -5),
        s!(-2, -5),
        s!(0, -2),
        s!(5, -2),
        s!(8, 1),
        s!(10, 3),
        s!(14, 6),
        s!(13, 8),
        s!(40, -4),
    ],
    rook_on_open_file: [s!(-25, -13), s!(-9, -10), s!(-1, -16)],
    rook_queen_file: s!(0, 9),
    rook_threats: [
        s!(-11, 10),
        s!(0, 10),
        s!(5, 9),
        s!(0, 0),
        s!(29, -27),
        s!(131, -31),
    ],
    queen_mobility: [
        s!(0, 0),
        s!(-43, -243),
        s!(-110, -32),
        s!(-45, -122),
        s!(-36, -67),
        s!(-29, -79),
        s!(-24, -65),
        s!(-23, -45),
        s!(-22, -25),
        s!(-18, -32),
        s!(-19, -7),
        s!(-17, -9),
        s!(-13, -2),
        s!(-11, -2),
        s!(-9, 1),
        s!(-8, 4),
        s!(-11, 13),
        s!(-4, 9),
        s!(-11, 18),
        s!(-14, 22),
        s!(-4, 16),
        s!(0, 18),
        s!(-8, 18),
        s!(37, -13),
        s!(79, -31),
        s!(10, 2),
        s!(99, -52),
        s!(529, -268),
    ],
    queen_discovery_risk: s!(-14, 15),
    king_on_open_file: [s!(12, 1), s!(0, 11), s!(-20, 4)],
    king_ring_attacks: [
        s!(44, -18),
        s!(40, -14),
        s!(31, -10),
        s!(17, -11),
        s!(-20, 4),
        s!(-102, 41),
        s!(-131, 52),
        s!(-179, 73),
        s!(-415, 221),
        s!(-408, 342),
        s!(-157, 389),
        s!(-185, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    king_virtual_mobility: [
        s!(0, 0),
        s!(1280, -541),
        s!(13, 0),
        s!(32, -7),
        s!(30, -10),
        s!(15, 1),
        s!(8, 0),
        s!(0, 0),
        s!(-4, 3),
        s!(-8, 2),
        s!(-9, 1),
        s!(-11, 3),
        s!(-15, 3),
        s!(-19, 4),
        s!(-24, 6),
        s!(-23, 3),
        s!(-34, 4),
        s!(-33, 2),
        s!(-22, -2),
        s!(-11, -6),
        s!(-10, -8),
        s!(-5, -12),
        s!(-4, -16),
        s!(-32, -16),
        s!(-20, -19),
        s!(-17, -23),
        s!(-71, -18),
        s!(-15, -29),
    ],
    king_discovery_risk: s!(-13, 0),
    pawn_connected: [s!(-13, -9), s!(0, 0), s!(12, 4)],
    pawn_phalanx: [s!(0, 1), s!(6, 4), s!(5, -4)],
    pawn_isolated: [s!(6, 7), s!(2, 7)],
    pawn_doubled: [s!(0, 0), s!(0, 2), s!(0, -3), s!(2, -20), s!(0, 687)],
    pawn_backward: [s!(6, 12), s!(0, 9)],
    pawn_threats: [
        s!(-14, -10),
        s!(21, -5),
        s!(30, 13),
        s!(33, -29),
        s!(13, -8),
        s!(61, -12),
    ],
    passed_pawn_friendly_king_distance: [s!(-3, 9), s!(-5, 2), s!(-9, -8), s!(-10, -11)],
    passed_pawn_enemy_king_distance: [s!(-3, -27), s!(22, -10), s!(0, 9), s!(-5, 20)],
    passed_pawn_table: [
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(15, -10),
        s!(12, 0),
        s!(9, -17),
        s!(0, -28),
        s!(8, -18),
        s!(11, -18),
        s!(39, -15),
        s!(12, -13),
        s!(19, -4),
        s!(17, 0),
        s!(14, -9),
        s!(-7, -9),
        s!(11, -13),
        s!(14, -4),
        s!(16, 1),
        s!(25, -8),
        s!(20, 14),
        s!(13, 14),
        s!(1, 13),
        s!(1, 10),
        s!(-9, 11),
        s!(-18, 19),
        s!(-32, 28),
        s!(10, 16),
        s!(23, 30),
        s!(23, 36),
        s!(10, 28),
        s!(0, 29),
        s!(3, 25),
        s!(14, 30),
        s!(13, 38),
        s!(-9, 35),
        s!(31, 72),
        s!(23, 58),
        s!(13, 41),
        s!(14, 25),
        s!(-1, 37),
        s!(-17, 63),
        s!(-31, 60),
        s!(-49, 81),
        s!(57, -12),
        s!(90, -16),
        s!(13, 55),
        s!(35, -2),
        s!(31, -14),
        s!(27, 22),
        s!(16, 63),
        s!(-5, 54),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
        s!(0, 0),
    ],
    piece_tables: PieceTables([
        [
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(-3, -66),
            s!(3, -69),
            s!(1, -62),
            s!(4, -60),
            s!(2, -64),
            s!(25, -70),
            s!(25, -77),
            s!(8, -79),
            s!(-7, -71),
            s!(-10, -74),
            s!(-1, -72),
            s!(0, -67),
            s!(1, -69),
            s!(0, -73),
            s!(8, -81),
            s!(-1, -79),
            s!(-4, -69),
            s!(-7, -68),
            s!(4, -76),
            s!(12, -78),
            s!(9, -75),
            s!(14, -80),
            s!(-1, -76),
            s!(-12, -77),
            s!(3, -58),
            s!(0, -63),
            s!(3, -64),
            s!(10, -70),
            s!(11, -70),
            s!(17, -72),
            s!(0, -66),
            s!(0, -67),
            s!(0, -45),
            s!(3, -35),
            s!(10, -25),
            s!(3, -23),
            s!(26, -39),
            s!(59, -60),
            s!(28, -43),
            s!(21, -56),
            s!(-2, 73),
            s!(-22, 72),
            s!(12, 4),
            s!(0, 44),
            s!(28, 48),
            s!(14, 20),
            s!(9, 4),
            s!(-11, 6),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
            s!(0, 0),
        ],
        [
            s!(-35, -7),
            s!(-11, -4),
            s!(-34, 2),
            s!(-24, 9),
            s!(-20, 0),
            s!(-28, 5),
            s!(-16, -5),
            s!(-40, 7),
            s!(-13, -8),
            s!(-25, 0),
            s!(-12, -6),
            s!(-3, 2),
            s!(-3, 0),
            s!(-10, -1),
            s!(-9, -4),
            s!(-6, -7),
            s!(-14, -5),
            s!(-12, 2),
            s!(-6, 0),
            s!(-11, 12),
            s!(-2, 9),
            s!(0, 0),
            s!(5, -8),
            s!(-10, -8),
            s!(-4, 0),
            s!(-8, 3),
            s!(-1, 10),
            s!(-1, 14),
            s!(4, 15),
            s!(10, 1),
            s!(0, -4),
            s!(-6, 3),
            s!(2, 1),
            s!(6, 1),
            s!(-5, 8),
            s!(22, 14),
            s!(2, 12),
            s!(12, 10),
            s!(-5, 3),
            s!(17, -7),
            s!(-22, -4),
            s!(-23, 0),
            s!(-15, 14),
            s!(0, 12),
            s!(8, 0),
            s!(10, 3),
            s!(-7, -5),
            s!(-43, 3),
            s!(-58, 2),
            s!(-38, 6),
            s!(-2, -2),
            s!(-17, 4),
            s!(-6, -3),
            s!(3, -10),
            s!(-22, -1),
            s!(-19, -12),
            s!(-165, 27),
            s!(-37, -24),
            s!(-47, 1),
            s!(-41, 3),
            s!(-12, -1),
            s!(-63, -1),
            s!(-77, -8),
            s!(-90, -18),
        ],
        [
            s!(43, -13),
            s!(26, -3),
            s!(37, -11),
            s!(31, -1),
            s!(26, -2),
            s!(15, 1),
            s!(36, -15),
            s!(48, -11),
            s!(23, 0),
            s!(44, -12),
            s!(37, -9),
            s!(33, -3),
            s!(36, -1),
            s!(42, -7),
            s!(53, -12),
            s!(38, -10),
            s!(41, -10),
            s!(39, -3),
            s!(36, -3),
            s!(33, 1),
            s!(39, 0),
            s!(42, -4),
            s!(35, -11),
            s!(44, -8),
            s!(19, -3),
            s!(21, -3),
            s!(29, 0),
            s!(32, -1),
            s!(40, -3),
            s!(31, 0),
            s!(34, -8),
            s!(16, -3),
            s!(7, 5),
            s!(16, 4),
            s!(20, 0),
            s!(18, 5),
            s!(22, 2),
            s!(13, 0),
            s!(27, -4),
            s!(19, -2),
            s!(15, 2),
            s!(16, 0),
            s!(27, 0),
            s!(4, 8),
            s!(32, -2),
            s!(46, 0),
            s!(36, -3),
            s!(37, -3),
            s!(0, 0),
            s!(9, 0),
            s!(-1, 0),
            s!(9, -5),
            s!(0, 1),
            s!(29, -7),
            s!(-1, 3),
            s!(24, -16),
            s!(0, 1),
            s!(-17, -6),
            s!(5, -6),
            s!(-16, 1),
            s!(-46, 3),
            s!(4, -3),
            s!(18, -5),
            s!(-20, 6),
        ],
        [
            s!(-5, -2),
            s!(-3, -5),
            s!(0, -5),
            s!(1, -5),
            s!(2, -10),
            s!(-5, -7),
            s!(-16, -8),
            s!(5, -21),
            s!(-17, -8),
            s!(-12, -9),
            s!(-15, -4),
            s!(-5, -9),
            s!(-2, -12),
            s!(-5, -11),
            s!(3, -16),
            s!(-28, -10),
            s!(-17, -9),
            s!(-14, -7),
            s!(-11, -8),
            s!(0, -11),
            s!(0, -12),
            s!(4, -18),
            s!(10, -23),
            s!(2, -19),
            s!(-18, -4),
            s!(-25, -3),
            s!(-24, -1),
            s!(-16, -1),
            s!(-15, -3),
            s!(-9, -9),
            s!(-2, -15),
            s!(-2, -18),
            s!(-18, -3),
            s!(0, -10),
            s!(1, -6),
            s!(7, -9),
            s!(-5, -8),
            s!(12, -11),
            s!(14, -15),
            s!(15, -15),
            s!(0, -6),
            s!(-2, -4),
            s!(-7, -5),
            s!(16, -11),
            s!(18, -14),
            s!(32, -16),
            s!(27, -14),
            s!(26, -18),
            s!(-15, 0),
            s!(-22, 7),
            s!(-7, 2),
            s!(15, -5),
            s!(-5, -5),
            s!(20, -9),
            s!(30, -11),
            s!(13, -11),
            s!(-10, 5),
            s!(-1, 0),
            s!(-16, 6),
            s!(-15, 1),
            s!(-1, -1),
            s!(39, -14),
            s!(47, -16),
            s!(-18, -1),
        ],
        [
            s!(17, -40),
            s!(11, -42),
            s!(12, -40),
            s!(16, -50),
            s!(11, -36),
            s!(-4, -40),
            s!(-7, -40),
            s!(34, -66),
            s!(9, -30),
            s!(10, -32),
            s!(12, -33),
            s!(15, -29),
            s!(17, -35),
            s!(16, -51),
            s!(19, -58),
            s!(15, -36),
            s!(4, -47),
            s!(11, -47),
            s!(1, -8),
            s!(7, -24),
            s!(5, -14),
            s!(11, -18),
            s!(10, -10),
            s!(8, -24),
            s!(10, -38),
            s!(-3, -13),
            s!(0, -14),
            s!(-6, 5),
            s!(2, -3),
            s!(7, -12),
            s!(11, -12),
            s!(7, -20),
            s!(-8, -32),
            s!(-1, -11),
            s!(-10, -10),
            s!(-16, 14),
            s!(-8, 20),
            s!(0, 14),
            s!(-1, 3),
            s!(14, -16),
            s!(-10, -34),
            s!(-13, -20),
            s!(3, -6),
            s!(-4, -1),
            s!(14, 18),
            s!(10, 0),
            s!(51, -32),
            s!(5, -12),
            s!(-21, -12),
            s!(-29, -9),
            s!(-33, 5),
            s!(-53, 39),
            s!(-55, 30),
            s!(24, 16),
            s!(-13, 19),
            s!(71, -60),
            s!(-24, -15),
            s!(-22, -3),
            s!(15, -22),
            s!(0, -1),
            s!(43, -29),
            s!(30, -14),
            s!(3, -24),
            s!(-22, 11),
        ],
        [
            s!(-63, -9),
            s!(-1, -10),
            s!(-13, 0),
            s!(-37, 7),
            s!(-11, -4),
            s!(-37, 5),
            s!(4, -15),
            s!(-18, -26),
            s!(1, -17),
            s!(-18, 4),
            s!(-22, 13),
            s!(-38, 21),
            s!(-31, 19),
            s!(-25, 17),
            s!(8, 3),
            s!(-6, -8),
            s!(0, -21),
            s!(22, -4),
            s!(-22, 16),
            s!(-36, 24),
            s!(-32, 23),
            s!(-18, 17),
            s!(0, 4),
            s!(-29, -3),
            s!(19, -27),
            s!(26, -7),
            s!(9, 11),
            s!(-27, 24),
            s!(-25, 25),
            s!(-40, 20),
            s!(-10, 3),
            s!(-53, -3),
            s!(0, -23),
            s!(15, -2),
            s!(27, 9),
            s!(9, 20),
            s!(-2, 21),
            s!(0, 17),
            s!(20, 5),
            s!(-20, -3),
            s!(28, -19),
            s!(107, -7),
            s!(37, 7),
            s!(58, 6),
            s!(8, 15),
            s!(59, 14),
            s!(67, 7),
            s!(6, -2),
            s!(13, -17),
            s!(85, -4),
            s!(64, -2),
            s!(42, 0),
            s!(46, 1),
            s!(76, 4),
            s!(21, 11),
            s!(-18, 0),
            s!(55, -45),
            s!(37, -17),
            s!(74, -22),
            s!(40, -12),
            s!(61, -14),
            s!(62, -11),
            s!(42, -13),
            s!(9, -26),
        ],
    ]),
};
