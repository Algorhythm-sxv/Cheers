#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i32; 2]; 9],
    pub knight_behind_pawn: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outpost: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishop_behind_pawn: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outpost: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonal: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_file: [[i32; 2]; 2],
    pub rook_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risk: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawn: [i32; 2],
    pub double_pawn: [i32; 2],
    pub isolated_pawn: [[i32; 2]; 8],
    // pub backward_pawn: [[i32; 2]; 8],
    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<EvalParams, [i32; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i32; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i32; Self::LEN]>(self)
    }
    pub fn from_array(params: [i32; Self::LEN]) -> Self {
        bytemuck::cast::<[i32; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i32; 2],
    pub knight_count: [i32; 2],
    pub bishop_count: [i32; 2],
    pub rook_count: [i32; 2],
    pub queen_count: [i32; 2],
    // pads to the length of PieceValues
    pub king_count: [i32; 2],

    pub knight_mobility: [[i32; 2]; 9],
    pub knights_behind_pawns: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outposts: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishops_behind_pawns: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outposts: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonals: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_files: [[i32; 2]; 2],
    pub rooks_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risks: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawns: [i32; 2],
    pub double_pawns: [i32; 2],
    pub isolated_pawns: [[i32; 2]; 8],
    // pub backward_pawns: [[i32; 2]; 8],
    pub pawn_placement: [[i32; 2]; 64],
    pub knight_placement: [[i32; 2]; 64],
    pub bishop_placement: [[i32; 2]; 64],
    pub rook_placement: [[i32; 2]; 64],
    pub queen_placement: [[i32; 2]; 64],
    pub king_placement: [[i32; 2]; 64],

    pub turn: i32,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn new() -> Self {
        bytemuck::cast::<[i32; Self::LEN], Self>([0i32; Self::LEN])
    }
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<Self, [i32; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i32 = 200000;
pub const DRAW_SCORE: i32 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [43, 122],
        [252, 353],
        [273, 340],
        [378, 575],
        [843, 961],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-67, -190],
        [-66, -79],
        [-43, -17],
        [-37, 13],
        [-23, 25],
        [-19, 50],
        [-7, 47],
        [6, 53],
        [19, 35],
    ],
    knight_behind_pawn: [9, 4],
    knight_king_distance: [[-17, 5], [-10, -15], [-20, -4], [-31, -15]],
    knight_outpost: [[0, -4], [3, 12]],
    bishop_mobility: [
        [-151, -27],
        [-65, -50],
        [-42, -38],
        [-37, -5],
        [-24, 0],
        [-14, 12],
        [-8, 29],
        [-2, 30],
        [-2, 38],
        [1, 31],
        [9, 38],
        [26, 15],
        [12, 17],
        [70, -13],
    ],
    bishop_behind_pawn: [10, 21],
    bishop_king_distance: [[-7, 1], [-14, -1], [-18, 6], [-30, 7]],
    bishop_outpost: [[-11, 1], [1, 1]],
    bishop_pair: [-3, 92],
    bishop_long_diagonal: [0, -4],
    rook_mobility: [
        [1, -138],
        [-112, -41],
        [-72, -4],
        [-71, 27],
        [-70, 27],
        [-68, 37],
        [-65, 47],
        [-61, 49],
        [-56, 52],
        [-52, 59],
        [-47, 66],
        [-48, 70],
        [-44, 66],
        [-43, 64],
        [-50, 76],
    ],
    rook_open_file: [[11, 10], [28, 12]],
    rook_on_seventh: [-13, 0],
    rook_trapped: [[-23, 0], [0, -46]],
    queen_mobility: [
        [-41, -1],
        [-191, -68],
        [-68, -148],
        [-48, -63],
        [-38, -182],
        [-36, -30],
        [-34, -6],
        [-39, 21],
        [-34, 37],
        [-35, 76],
        [-31, 81],
        [-25, 84],
        [-20, 89],
        [-16, 92],
        [-9, 85],
        [-8, 87],
        [0, 84],
        [-6, 91],
        [0, 75],
        [7, 74],
        [13, 40],
        [43, 22],
        [80, -16],
        [63, -9],
        [68, -24],
        [22, -39],
        [52, -7],
        [30, -17],
    ],
    queen_discovery_risk: [-13, 11],
    king_mobility: [
        [-16, 6],
        [-3, -26],
        [-16, 60],
        [-12, 20],
        [10, 8],
        [10, -18],
        [7, -4],
        [-3, -4],
        [13, -22],
    ],
    king_defenders: [
        [-60, 3],
        [-32, 6],
        [-3, 1],
        [13, 0],
        [25, 0],
        [34, -2],
        [37, -17],
        [-142, -15],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    passed_pawn: [-4, 32],
    double_pawn: [-18, -52],
    isolated_pawn: [
        [-13, -22],
        [-11, -5],
        [-22, -32],
        [-15, -33],
        [-34, -33],
        [-14, -24],
        [-7, -19],
        [-20, -17],
    ],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-14, 26],
            [-15, 11],
            [-4, 21],
            [10, 34],
            [8, 39],
            [9, 29],
            [8, 8],
            [-4, -5],
            [-30, 26],
            [-18, 19],
            [-20, 19],
            [-1, 16],
            [7, 31],
            [-17, 25],
            [3, 2],
            [-8, -3],
            [-15, 32],
            [-10, 19],
            [-3, 9],
            [-1, 11],
            [4, 10],
            [9, 11],
            [-5, 15],
            [6, 0],
            [-11, 67],
            [-11, 32],
            [-3, 55],
            [0, 25],
            [12, 25],
            [19, 26],
            [9, 34],
            [18, 37],
            [10, 122],
            [-1, 92],
            [57, 102],
            [57, 91],
            [53, 82],
            [17, 87],
            [68, 89],
            [41, 77],
            [117, 185],
            [65, 165],
            [109, 210],
            [58, 154],
            [84, 198],
            [24, 163],
            [-45, 196],
            [-1, 196],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-108, 36],
            [-18, -28],
            [-56, -21],
            [-34, -35],
            [-50, -3],
            [-51, -16],
            [-20, -18],
            [-32, 7],
            [-35, -15],
            [-51, 19],
            [-23, -35],
            [-26, -30],
            [-25, -41],
            [-35, -12],
            [-38, -11],
            [-34, -17],
            [-15, -17],
            [-30, -23],
            [-31, -38],
            [-19, -4],
            [-32, -6],
            [-38, -36],
            [-17, -35],
            [-22, -6],
            [7, 6],
            [1, -8],
            [-3, 10],
            [-18, 25],
            [-8, 5],
            [3, -7],
            [25, -31],
            [-1, -13],
            [23, -3],
            [11, -20],
            [24, 8],
            [56, -6],
            [8, 10],
            [36, 4],
            [24, -21],
            [62, 7],
            [-45, 16],
            [9, -18],
            [43, 11],
            [54, -2],
            [95, -21],
            [111, -8],
            [54, -8],
            [69, -37],
            [57, 3],
            [29, -5],
            [68, -17],
            [83, -11],
            [91, -15],
            [102, -39],
            [53, 23],
            [79, 11],
            [-56, 77],
            [-54, 50],
            [-40, -2],
            [88, -31],
            [41, 16],
            [61, 4],
            [32, 15],
            [-22, -93],
        ],
        [
            [25, 14],
            [2, -13],
            [2, 5],
            [-15, -4],
            [-25, 8],
            [-20, -11],
            [-41, 20],
            [11, 24],
            [12, 0],
            [6, -16],
            [0, -8],
            [-21, 10],
            [-14, -2],
            [-7, -3],
            [-9, -2],
            [26, -21],
            [19, 0],
            [2, -1],
            [-16, 16],
            [-10, 3],
            [-16, 29],
            [-27, 4],
            [1, -14],
            [8, -20],
            [19, -5],
            [-15, -2],
            [-3, 9],
            [27, 8],
            [14, 7],
            [-5, 0],
            [1, -8],
            [15, -14],
            [28, -4],
            [19, 3],
            [6, 21],
            [43, 12],
            [21, 20],
            [12, -8],
            [7, 0],
            [10, 3],
            [22, 0],
            [30, 0],
            [40, 1],
            [49, -3],
            [65, -19],
            [89, 11],
            [74, -22],
            [41, 14],
            [20, 1],
            [34, -1],
            [33, -7],
            [40, -19],
            [28, -1],
            [35, 0],
            [12, 20],
            [30, -18],
            [10, 34],
            [-17, 6],
            [25, -6],
            [-161, 46],
            [-146, 28],
            [-75, 19],
            [33, -23],
            [-26, -16],
        ],
        [
            [-48, 25],
            [-47, 14],
            [-40, 21],
            [-32, 5],
            [-16, -13],
            [-17, -4],
            [1, -18],
            [-19, -6],
            [-63, 7],
            [-39, -3],
            [-34, -3],
            [-45, 1],
            [-15, -19],
            [-14, -28],
            [-7, -32],
            [-59, 0],
            [-67, 13],
            [-45, 16],
            [-57, 9],
            [-25, -7],
            [-19, -24],
            [-7, -27],
            [23, -37],
            [-26, 12],
            [-50, 31],
            [-63, 36],
            [-36, 9],
            [-20, 9],
            [-25, 8],
            [-40, 15],
            [49, -26],
            [-25, 18],
            [-39, 44],
            [-23, 37],
            [-22, 44],
            [-7, 25],
            [-5, 25],
            [14, 5],
            [48, 6],
            [-10, 45],
            [-45, 48],
            [-3, 48],
            [-19, 44],
            [-22, 44],
            [36, 11],
            [41, 13],
            [54, 7],
            [9, 42],
            [-18, 43],
            [-12, 49],
            [-6, 53],
            [43, 36],
            [35, 35],
            [17, 33],
            [37, 36],
            [21, 29],
            [-1, 25],
            [-78, 67],
            [-4, 27],
            [-41, 51],
            [-34, 36],
            [-9, 40],
            [-32, 44],
            [-26, 51],
        ],
        [
            [-15, -12],
            [-25, -63],
            [-22, -15],
            [-15, -1],
            [-10, -32],
            [-41, -1],
            [72, -113],
            [48, -134],
            [-40, -8],
            [-21, 2],
            [-19, -3],
            [-7, -29],
            [-14, -11],
            [2, -52],
            [11, -49],
            [35, -62],
            [0, -58],
            [-16, -12],
            [-29, 50],
            [-27, 35],
            [-36, 52],
            [-13, 28],
            [-11, 27],
            [16, -3],
            [-10, 1],
            [-33, 7],
            [-23, 22],
            [-26, 98],
            [-19, 65],
            [-8, 41],
            [7, 15],
            [1, 27],
            [-17, 3],
            [-8, 19],
            [-13, 35],
            [-22, 95],
            [-26, 104],
            [-6, 111],
            [22, 63],
            [12, 48],
            [-8, -2],
            [-17, 36],
            [-1, 40],
            [-31, 92],
            [37, 70],
            [98, 28],
            [59, 39],
            [47, 67],
            [-15, 6],
            [-39, 31],
            [-17, 67],
            [-42, 103],
            [-30, 104],
            [40, 51],
            [29, 21],
            [82, 58],
            [-8, -29],
            [17, -31],
            [31, 7],
            [6, 35],
            [58, 16],
            [190, -73],
            [66, -45],
            [87, -33],
        ],
        [
            [26, -96],
            [0, -54],
            [-12, -27],
            [-69, -17],
            [-20, -48],
            [-52, -32],
            [6, -57],
            [41, -137],
            [-1, -22],
            [-64, -3],
            [-33, -6],
            [-89, 7],
            [-86, 6],
            [-87, 6],
            [-27, -18],
            [-20, -43],
            [2, -50],
            [-12, 3],
            [-76, 12],
            [-95, 23],
            [-88, 17],
            [-106, 12],
            [-73, 0],
            [-94, -29],
            [14, -24],
            [10, 3],
            [-38, 34],
            [-65, 53],
            [-114, 42],
            [-115, 37],
            [-111, 26],
            [-56, -29],
            [135, -17],
            [49, 24],
            [-3, 63],
            [-39, 63],
            [-118, 73],
            [-27, 66],
            [-51, 44],
            [34, -9],
            [117, -12],
            [10, 55],
            [128, 56],
            [41, 58],
            [31, 71],
            [-78, 83],
            [-46, 59],
            [-18, 5],
            [88, -40],
            [120, 30],
            [94, 76],
            [63, 38],
            [-23, 77],
            [-94, 85],
            [-80, 86],
            [-83, 18],
            [123, -154],
            [149, -41],
            [124, 18],
            [46, 37],
            [-6, 0],
            [69, -3],
            [150, 22],
            [49, -112],
        ],
    ]),
};
