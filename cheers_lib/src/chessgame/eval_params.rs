use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[derive(Copy, Clone, Debug, Default, Pod, Zeroable)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i32; 2]; 9],
    pub knight_behind_pawn: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outpost: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishop_behind_pawn: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outpost: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonal: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_file: [[i32; 2]; 2],
    pub rook_on_seventh: [i32; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risk: [i32; 2],

    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawn: [i32; 2],
    pub double_pawn: [i32; 2],
    pub isolated_pawn: [[i32; 2]; 8],
    // pub backward_pawn: [[i32; 2]; 8],
    pub piece_tables: PieceTables,
}

impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<EvalParams, [i32; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i32; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i32; Self::LEN]>(self)
    }
    pub fn from_array(params: [i32; Self::LEN]) -> Self {
        bytemuck::cast::<[i32; Self::LEN], EvalParams>(params)
    }
}

#[derive(Clone, Copy, Pod, Zeroable)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i32; 2],
    pub knight_count: [i32; 2],
    pub bishop_count: [i32; 2],
    pub rook_count: [i32; 2],
    pub queen_count: [i32; 2],
    // pads to the length of PieceValues
    pub king_count: [i32; 2],

    pub knight_mobility: [[i32; 2]; 9],
    pub knights_behind_pawns: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outposts: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishops_behind_pawns: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outposts: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonals: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_files: [[i32; 2]; 2],
    pub rooks_on_seventh: [i32; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risks: [i32; 2],

    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawns: [i32; 2],
    pub double_pawns: [i32; 2],
    pub isolated_pawns: [[i32; 2]; 8],
    // pub backward_pawns: [[i32; 2]; 8],
    pub pawn_placement: [[i32; 2]; 64],
    pub knight_placement: [[i32; 2]; 64],
    pub bishop_placement: [[i32; 2]; 64],
    pub rook_placement: [[i32; 2]; 64],
    pub queen_placement: [[i32; 2]; 64],
    pub king_placement: [[i32; 2]; 64],

    pub turn: i32,
}

impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn new() -> Self {
        bytemuck::cast::<[i32; Self::LEN], Self>([0i32; Self::LEN])
    }
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<Self, [i32; Self::LEN]>(*self)
    }
}

impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i32 = 20000;
pub const DRAW_SCORE: i32 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [51, 132],
        [254, 358],
        [279, 341],
        [377, 580],
        [853, 977],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-87, -166],
        [-68, -86],
        [-46, -21],
        [-39, 11],
        [-24, 24],
        [-19, 51],
        [-7, 48],
        [6, 56],
        [18, 39],
    ],
    knight_behind_pawn: [9, 5],
    knight_king_distance: [[-18, 5], [-9, -15], [-19, -5], [-30, -15]],
    knight_outpost: [[0, -2], [3, 12]],
    bishop_mobility: [
        [-156, -45],
        [-69, -57],
        [-45, -45],
        [-39, -8],
        [-26, 0],
        [-15, 12],
        [-9, 31],
        [-3, 33],
        [-2, 43],
        [1, 36],
        [10, 43],
        [27, 19],
        [30, 20],
        [67, -4],
    ],
    bishop_behind_pawn: [12, 22],
    bishop_king_distance: [[-7, 2], [-14, -2], [-19, 5], [-34, 10]],
    bishop_outpost: [[-11, 3], [1, 1]],
    bishop_pair: [-4, 93],
    bishop_long_diagonal: [0, -6],
    rook_mobility: [
        [-175, -145],
        [-117, -49],
        [-70, -10],
        [-68, 25],
        [-67, 32],
        [-64, 39],
        [-61, 49],
        [-57, 51],
        [-53, 55],
        [-49, 62],
        [-45, 71],
        [-46, 74],
        [-45, 72],
        [-41, 68],
        [-66, 82],
    ],
    rook_open_file: [[9, 10], [29, 12]],
    rook_on_seventh: [-14, 0],
    queen_mobility: [
        [-45, -5],
        [-149, -53],
        [-57, -133],
        [-69, 13],
        [-39, -167],
        [-37, -36],
        [-34, -8],
        [-38, 14],
        [-33, 28],
        [-32, 64],
        [-29, 75],
        [-23, 76],
        [-19, 85],
        [-14, 89],
        [-8, 85],
        [-7, 85],
        [0, 85],
        [-1, 84],
        [-4, 79],
        [9, 70],
        [15, 38],
        [47, 15],
        [63, -7],
        [83, -22],
        [102, -48],
        [-74, 26],
        [36, -32],
        [0, -59],
    ],
    queen_discovery_risk: [-13, 10],
    king_defenders: [
        [-62, 7],
        [-35, 4],
        [-5, 0],
        [11, 0],
        [22, 1],
        [32, 0],
        [35, -16],
        [-51, -9],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    passed_pawn: [-15, 12],
    double_pawn: [-38, -85],
    isolated_pawn: [
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-20, 24],
            [-6, 32],
            [-9, 14],
            [8, 42],
            [5, 37],
            [7, 32],
            [20, 24],
            [-10, -4],
            [-37, 24],
            [-10, 39],
            [-26, 12],
            [-4, 18],
            [3, 30],
            [-21, 25],
            [13, 18],
            [-15, -1],
            [-21, 29],
            [-1, 37],
            [-6, 3],
            [-5, 10],
            [0, 5],
            [6, 12],
            [5, 28],
            [0, 1],
            [-18, 63],
            [-5, 48],
            [-10, 47],
            [-3, 22],
            [9, 18],
            [17, 22],
            [18, 44],
            [11, 35],
            [3, 116],
            [2, 105],
            [56, 90],
            [57, 83],
            [47, 70],
            [19, 72],
            [80, 85],
            [40, 70],
            [105, 182],
            [79, 176],
            [106, 203],
            [58, 152],
            [68, 194],
            [29, 162],
            [-36, 200],
            [-23, 199],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-109, 38],
            [-16, -32],
            [-58, -22],
            [-32, -35],
            [-50, -4],
            [-52, -17],
            [-18, -12],
            [-34, 7],
            [-35, -15],
            [-48, 19],
            [-23, -36],
            [-25, -32],
            [-24, -44],
            [-36, -14],
            [-39, -10],
            [-33, -17],
            [-14, -17],
            [-30, -26],
            [-32, -40],
            [-19, -7],
            [-31, -8],
            [-39, -40],
            [-17, -36],
            [-21, -5],
            [7, 7],
            [5, -11],
            [-2, 7],
            [-18, 23],
            [-8, 6],
            [3, -7],
            [26, -33],
            [0, -14],
            [30, -7],
            [12, -20],
            [22, 5],
            [59, -9],
            [8, 6],
            [33, 6],
            [26, -20],
            [62, 12],
            [-42, 16],
            [11, -18],
            [46, 7],
            [55, -2],
            [104, -25],
            [125, -15],
            [59, -11],
            [77, -41],
            [57, 1],
            [39, 0],
            [74, -21],
            [93, -17],
            [106, -19],
            [112, -43],
            [64, 13],
            [88, 7],
            [-56, 74],
            [-39, 43],
            [-23, -6],
            [63, -20],
            [42, 23],
            [-64, 32],
            [-35, 31],
            [-9, -87],
        ],
        [
            [26, 17],
            [0, -12],
            [0, 4],
            [-21, -2],
            [-26, 7],
            [-23, -12],
            [-40, 20],
            [11, 30],
            [8, 1],
            [5, -17],
            [-5, -8],
            [-23, 10],
            [-18, -2],
            [-9, -3],
            [-11, -2],
            [25, -21],
            [20, -1],
            [0, -2],
            [-18, 18],
            [-13, 2],
            [-18, 29],
            [-30, 4],
            [-2, -15],
            [7, -22],
            [20, -4],
            [-13, -6],
            [-8, 8],
            [23, 9],
            [11, 7],
            [-7, -1],
            [-2, -8],
            [16, -15],
            [28, -3],
            [18, 3],
            [5, 20],
            [42, 10],
            [24, 16],
            [13, -11],
            [6, 0],
            [4, 9],
            [18, 2],
            [30, 0],
            [47, -1],
            [49, -5],
            [65, -21],
            [90, 10],
            [76, -24],
            [40, 13],
            [23, 6],
            [37, 0],
            [32, -9],
            [30, -18],
            [30, -3],
            [49, -4],
            [8, 24],
            [42, -16],
            [36, 38],
            [-22, 9],
            [40, -7],
            [-131, 41],
            [-61, 10],
            [-54, 20],
            [8, -19],
            [14, -16],
        ],
        [
            [-49, 26],
            [-49, 14],
            [-41, 21],
            [-33, 6],
            [-18, -12],
            [-19, -3],
            [-3, -17],
            [-23, -3],
            [-65, 8],
            [-41, -2],
            [-35, -1],
            [-46, 2],
            [-16, -19],
            [-15, -27],
            [-14, -29],
            [-60, 0],
            [-70, 16],
            [-48, 16],
            [-59, 8],
            [-27, -6],
            [-22, -21],
            [-10, -27],
            [20, -38],
            [-31, 17],
            [-51, 32],
            [-59, 34],
            [-40, 13],
            [-21, 11],
            [-26, 9],
            [-43, 16],
            [43, -23],
            [-27, 18],
            [-41, 47],
            [-24, 36],
            [-23, 45],
            [-8, 27],
            [0, 21],
            [17, 8],
            [49, 7],
            [-7, 43],
            [-51, 52],
            [-2, 48],
            [-18, 46],
            [-21, 46],
            [33, 13],
            [36, 16],
            [59, 5],
            [6, 42],
            [-18, 44],
            [-12, 51],
            [-6, 54],
            [38, 40],
            [37, 37],
            [27, 33],
            [39, 38],
            [19, 30],
            [3, 25],
            [-74, 67],
            [-9, 30],
            [-37, 53],
            [-39, 41],
            [-11, 45],
            [-27, 45],
            [-22, 50],
        ],
        [
            [-19, -6],
            [-28, -56],
            [-27, -10],
            [-19, 7],
            [-12, -32],
            [-41, -2],
            [72, -109],
            [56, -136],
            [-49, 11],
            [-21, 0],
            [-23, 2],
            [-9, -24],
            [-17, -9],
            [1, -51],
            [8, -50],
            [34, -55],
            [-6, -44],
            [-22, -1],
            [-34, 57],
            [-31, 39],
            [-40, 55],
            [-16, 29],
            [-15, 29],
            [13, 3],
            [-15, 9],
            [-40, 14],
            [-26, 25],
            [-26, 99],
            [-24, 75],
            [-11, 43],
            [4, 14],
            [0, 28],
            [-13, -5],
            [-14, 25],
            [-9, 36],
            [-32, 108],
            [-25, 108],
            [-5, 113],
            [15, 68],
            [9, 50],
            [-11, -3],
            [-17, 30],
            [1, 39],
            [-32, 90],
            [32, 77],
            [95, 36],
            [68, 35],
            [46, 62],
            [-17, 15],
            [-34, 21],
            [-18, 65],
            [-37, 97],
            [-26, 99],
            [49, 43],
            [25, 34],
            [76, 64],
            [-1, -30],
            [12, -28],
            [33, 5],
            [40, 3],
            [64, 8],
            [159, -53],
            [155, -122],
            [91, -38],
        ],
        [
            [21, -66],
            [18, -60],
            [9, -34],
            [-59, -21],
            [0, -56],
            [-43, -36],
            [25, -65],
            [37, -108],
            [13, -21],
            [-45, -12],
            [-13, -14],
            [-70, 0],
            [-69, 0],
            [-71, 0],
            [-7, -28],
            [-3, -47],
            [19, -45],
            [0, 0],
            [-60, 8],
            [-76, 19],
            [-73, 14],
            [-92, 9],
            [-58, -5],
            [-81, -22],
            [9, -15],
            [23, -1],
            [-31, 35],
            [-61, 54],
            [-109, 43],
            [-97, 37],
            [-103, 25],
            [-27, -23],
            [55, -4],
            [30, 24],
            [-21, 64],
            [-61, 66],
            [-101, 70],
            [-31, 67],
            [-70, 47],
            [27, 0],
            [83, -9],
            [-17, 52],
            [163, 46],
            [36, 54],
            [11, 70],
            [-51, 75],
            [-77, 60],
            [-32, 9],
            [129, -53],
            [17, 36],
            [75, 70],
            [-8, 41],
            [-53, 76],
            [-159, 88],
            [-79, 78],
            [-103, 18],
            [81, -128],
            [115, -48],
            [114, 10],
            [10, 31],
            [-63, 0],
            [10, 4],
            [114, 22],
            [15, -87],
        ],
    ]),
};
