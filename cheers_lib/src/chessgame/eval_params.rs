use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[derive(Copy, Clone, Debug, Default, Pod, Zeroable, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i32; 2]; 9],
    pub knight_behind_pawn: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outpost: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishop_behind_pawn: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outpost: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonal: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_file: [[i32; 2]; 2],
    pub rook_on_seventh: [i32; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risk: [i32; 2],

    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawn: [i32; 2],
    pub double_pawn: [i32; 2],
    pub isolated_pawn: [[i32; 2]; 8],
    // pub backward_pawn: [[i32; 2]; 8],
    pub piece_tables: PieceTables,
}

impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<EvalParams, [i32; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i32; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i32; Self::LEN]>(self)
    }
    pub fn from_array(params: [i32; Self::LEN]) -> Self {
        bytemuck::cast::<[i32; Self::LEN], EvalParams>(params)
    }
}

#[derive(Clone, Copy, Pod, Zeroable)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i32; 2],
    pub knight_count: [i32; 2],
    pub bishop_count: [i32; 2],
    pub rook_count: [i32; 2],
    pub queen_count: [i32; 2],
    // pads to the length of PieceValues
    pub king_count: [i32; 2],

    pub knight_mobility: [[i32; 2]; 9],
    pub knights_behind_pawns: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outposts: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishops_behind_pawns: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outposts: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonals: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_files: [[i32; 2]; 2],
    pub rooks_on_seventh: [i32; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risks: [i32; 2],

    pub king_defenders: [[i32; 2]; 12],

    pub passed_pawns: [i32; 2],
    pub double_pawns: [i32; 2],
    pub isolated_pawns: [[i32; 2]; 8],
    // pub backward_pawns: [[i32; 2]; 8],
    pub pawn_placement: [[i32; 2]; 64],
    pub knight_placement: [[i32; 2]; 64],
    pub bishop_placement: [[i32; 2]; 64],
    pub rook_placement: [[i32; 2]; 64],
    pub queen_placement: [[i32; 2]; 64],
    pub king_placement: [[i32; 2]; 64],

    pub turn: i32,
}

impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn new() -> Self {
        bytemuck::cast::<[i32; Self::LEN], Self>([0i32; Self::LEN])
    }
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<Self, [i32; Self::LEN]>(*self)
    }
}

impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i32 = 20000;
pub const DRAW_SCORE: i32 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [45, 121],
        [256, 355],
        [279, 342],
        [383, 578],
        [857, 970],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-71, -203],
        [-67, -80],
        [-44, -16],
        [-37, 14],
        [-24, 26],
        [-19, 53],
        [-7, 49],
        [5, 56],
        [18, 39],
    ],
    knight_behind_pawn: [9, 4],
    knight_king_distance: [[-18, 4], [-10, -15], [-19, -5], [-31, -15]],
    knight_outpost: [[0, -4], [3, 12]],
    bishop_mobility: [
        [-154, -30],
        [-67, -48],
        [-43, -40],
        [-38, -6],
        [-25, 1],
        [-14, 13],
        [-8, 29],
        [-2, 31],
        [-2, 39],
        [1, 33],
        [10, 40],
        [27, 16],
        [8, 21],
        [66, -8],
    ],
    bishop_behind_pawn: [11, 21],
    bishop_king_distance: [[-7, 2], [-14, -2], [-19, 6], [-32, 12]],
    bishop_outpost: [[-11, 1], [1, 1]],
    bishop_pair: [-4, 94],
    bishop_long_diagonal: [0, -5],
    rook_mobility: [
        [-44, -132],
        [-121, -42],
        [-73, -12],
        [-71, 22],
        [-69, 30],
        [-67, 38],
        [-65, 48],
        [-60, 50],
        [-55, 54],
        [-51, 60],
        [-46, 69],
        [-47, 72],
        [-43, 68],
        [-40, 66],
        [-50, 79],
    ],
    rook_open_file: [[11, 9], [28, 13]],
    rook_on_seventh: [-13, 0],
    queen_mobility: [
        [-43, -3],
        [-172, -62],
        [-60, -141],
        [-53, -44],
        [-39, -190],
        [-38, -25],
        [-36, -6],
        [-40, 18],
        [-36, 35],
        [-36, 75],
        [-32, 80],
        [-26, 83],
        [-22, 88],
        [-17, 93],
        [-9, 86],
        [-9, 88],
        [0, 83],
        [-4, 89],
        [-4, 79],
        [10, 69],
        [16, 37],
        [38, 24],
        [74, -15],
        [81, -16],
        [80, -35],
        [3, -22],
        [54, -8],
        [23, -24],
    ],
    queen_discovery_risk: [-13, 13],
    king_defenders: [
        [-62, 7],
        [-34, 8],
        [-4, 2],
        [12, 1],
        [24, 1],
        [33, 0],
        [37, -26],
        [-113, -14],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    passed_pawn: [-6, 32],
    double_pawn: [-16, -54],
    isolated_pawn: [
        [-11, -23],
        [-12, -5],
        [-20, -30],
        [-14, -33],
        [-28, -34],
        [-14, -24],
        [-6, -20],
        [-19, -16],
    ],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-17, 28],
            [-15, 13],
            [-5, 23],
            [10, 38],
            [8, 41],
            [9, 31],
            [9, 10],
            [-5, -4],
            [-33, 29],
            [-17, 21],
            [-21, 21],
            [-1, 19],
            [6, 33],
            [-17, 26],
            [4, 5],
            [-9, -1],
            [-17, 35],
            [-9, 21],
            [-3, 10],
            [-1, 13],
            [3, 10],
            [10, 12],
            [-3, 16],
            [5, 0],
            [-13, 69],
            [-11, 34],
            [-4, 56],
            [1, 25],
            [13, 24],
            [21, 24],
            [11, 34],
            [18, 35],
            [9, 124],
            [0, 92],
            [59, 99],
            [59, 86],
            [54, 73],
            [24, 72],
            [74, 81],
            [48, 70],
            [118, 188],
            [65, 167],
            [116, 209],
            [62, 154],
            [79, 199],
            [22, 160],
            [-36, 194],
            [-11, 198],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-111, 35],
            [-18, -31],
            [-56, -22],
            [-32, -37],
            [-49, -2],
            [-52, -16],
            [-20, -14],
            [-32, 6],
            [-34, -16],
            [-49, 17],
            [-23, -35],
            [-25, -31],
            [-25, -42],
            [-35, -14],
            [-38, -12],
            [-33, -17],
            [-15, -18],
            [-30, -24],
            [-31, -39],
            [-19, -5],
            [-32, -6],
            [-38, -37],
            [-17, -37],
            [-22, -6],
            [8, 6],
            [2, -9],
            [-2, 9],
            [-18, 24],
            [-8, 4],
            [2, -7],
            [25, -32],
            [0, -15],
            [27, -5],
            [11, -20],
            [22, 7],
            [57, -7],
            [9, 9],
            [35, 4],
            [25, -23],
            [63, 9],
            [-41, 17],
            [9, -16],
            [43, 11],
            [56, -4],
            [102, -23],
            [112, -9],
            [54, -7],
            [72, -37],
            [55, 3],
            [34, -3],
            [68, -19],
            [87, -13],
            [89, -14],
            [104, -40],
            [57, 20],
            [82, 13],
            [-60, 79],
            [-52, 53],
            [-42, -2],
            [72, -28],
            [47, 18],
            [24, 9],
            [16, 23],
            [-17, -101],
        ],
        [
            [28, 13],
            [1, -11],
            [2, 4],
            [-17, -3],
            [-24, 6],
            [-20, -10],
            [-41, 20],
            [8, 27],
            [12, -1],
            [6, -16],
            [-1, -9],
            [-21, 10],
            [-15, -1],
            [-8, -2],
            [-9, -2],
            [27, -23],
            [21, -2],
            [2, -2],
            [-17, 17],
            [-11, 3],
            [-16, 29],
            [-29, 5],
            [1, -15],
            [8, -20],
            [20, -5],
            [-15, -4],
            [-5, 8],
            [27, 8],
            [14, 8],
            [-5, 0],
            [0, -7],
            [16, -15],
            [29, -4],
            [19, 3],
            [4, 21],
            [43, 11],
            [22, 17],
            [12, -10],
            [7, 0],
            [6, 4],
            [21, 1],
            [28, 1],
            [44, 1],
            [49, -3],
            [70, -20],
            [90, 11],
            [80, -25],
            [43, 15],
            [21, 3],
            [34, 0],
            [31, -7],
            [31, -17],
            [26, 0],
            [43, 0],
            [14, 21],
            [44, -21],
            [10, 38],
            [-12, 7],
            [25, -3],
            [-162, 48],
            [-125, 25],
            [-71, 20],
            [33, -23],
            [-17, -14],
        ],
        [
            [-49, 26],
            [-48, 14],
            [-41, 21],
            [-32, 5],
            [-16, -13],
            [-17, -3],
            [0, -16],
            [-21, -5],
            [-63, 7],
            [-40, -2],
            [-33, -3],
            [-45, 1],
            [-14, -19],
            [-14, -28],
            [-11, -31],
            [-61, 0],
            [-68, 15],
            [-44, 16],
            [-59, 9],
            [-24, -8],
            [-20, -23],
            [-7, -28],
            [23, -39],
            [-27, 15],
            [-51, 32],
            [-61, 36],
            [-36, 10],
            [-17, 8],
            [-23, 8],
            [-41, 16],
            [49, -26],
            [-27, 19],
            [-39, 46],
            [-24, 37],
            [-22, 43],
            [-5, 26],
            [0, 22],
            [16, 5],
            [50, 6],
            [-10, 46],
            [-46, 50],
            [-2, 48],
            [-17, 45],
            [-28, 48],
            [35, 11],
            [40, 11],
            [58, 5],
            [5, 43],
            [-19, 44],
            [-12, 49],
            [-6, 53],
            [38, 37],
            [36, 37],
            [27, 32],
            [40, 37],
            [16, 31],
            [-1, 26],
            [-80, 69],
            [-9, 29],
            [-44, 53],
            [-38, 39],
            [-17, 45],
            [-34, 47],
            [-31, 54],
        ],
        [
            [-17, -6],
            [-26, -61],
            [-23, -16],
            [-16, 3],
            [-11, -32],
            [-41, 0],
            [69, -106],
            [51, -138],
            [-42, -1],
            [-20, 1],
            [-20, 0],
            [-7, -25],
            [-15, -9],
            [2, -52],
            [9, -48],
            [37, -69],
            [-1, -58],
            [-18, -8],
            [-30, 51],
            [-29, 38],
            [-36, 53],
            [-14, 28],
            [-12, 28],
            [15, -1],
            [-12, 4],
            [-35, 8],
            [-24, 23],
            [-26, 100],
            [-20, 69],
            [-8, 40],
            [8, 13],
            [1, 27],
            [-17, 2],
            [-10, 26],
            [-13, 36],
            [-24, 103],
            [-26, 107],
            [-8, 115],
            [19, 68],
            [11, 49],
            [-10, -7],
            [-15, 31],
            [-1, 41],
            [-34, 100],
            [36, 75],
            [101, 29],
            [65, 34],
            [48, 63],
            [-16, 11],
            [-36, 20],
            [-13, 63],
            [-41, 99],
            [-27, 102],
            [53, 38],
            [28, 19],
            [84, 55],
            [-1, -35],
            [12, -27],
            [31, 7],
            [5, 33],
            [58, 16],
            [185, -68],
            [79, -57],
            [84, -32],
        ],
        [
            [9, -63],
            [5, -58],
            [-5, -33],
            [-72, -18],
            [-13, -55],
            [-55, -34],
            [11, -63],
            [25, -107],
            [1, -21],
            [-59, -10],
            [-28, -12],
            [-84, 1],
            [-83, 0],
            [-84, 0],
            [-21, -25],
            [-17, -44],
            [2, -43],
            [-10, 0],
            [-70, 9],
            [-91, 21],
            [-84, 15],
            [-104, 11],
            [-71, -3],
            [-95, -20],
            [22, -20],
            [17, -1],
            [-41, 35],
            [-67, 54],
            [-113, 43],
            [-112, 39],
            [-117, 26],
            [-47, -19],
            [135, -16],
            [46, 21],
            [-2, 62],
            [-45, 63],
            [-113, 73],
            [-26, 67],
            [-51, 44],
            [44, -3],
            [109, -12],
            [2, 49],
            [138, 50],
            [44, 54],
            [26, 68],
            [-79, 81],
            [-48, 58],
            [-14, 9],
            [103, -49],
            [89, 27],
            [86, 70],
            [43, 36],
            [-29, 74],
            [-113, 83],
            [-79, 81],
            [-89, 17],
            [110, -131],
            [138, -45],
            [121, 12],
            [33, 31],
            [-27, 0],
            [49, -3],
            [138, 21],
            [38, -88],
        ],
    ]),
};
