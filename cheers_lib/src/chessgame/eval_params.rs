#[cfg(feature = "eval-tracing")]
use bytemuck::{Pod, Zeroable};

use super::eval_types::{PieceTables, PieceValues};

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
#[repr(C)]
pub struct EvalParams {
    pub piece_values: PieceValues,

    pub knight_mobility: [[i32; 2]; 9],
    pub knight_behind_pawn: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outpost: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishop_behind_pawn: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outpost: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonal: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_file: [[i32; 2]; 2],
    pub rook_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risk: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],
    pub king_open_file: [[i32; 2]; 2],
    pub no_enemy_queen: [i32; 2],

    pub passed_pawn: [i32; 2],
    pub double_pawn: [[i32; 2]; 8],
    pub isolated_pawn: [[i32; 2]; 8],
    pub connected_pawn: [[i32; 2]; 8],
    pub phalanx_pawn: [[i32; 2]; 8],

    pub piece_tables: PieceTables,
}

#[cfg(feature = "eval-tracing")]
impl EvalParams {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<EvalParams, [i32; Self::LEN]>(*self)
    }
    pub fn as_array(&self) -> &[i32; Self::LEN] {
        bytemuck::cast_ref::<EvalParams, [i32; Self::LEN]>(self)
    }
    pub fn from_array(params: [i32; Self::LEN]) -> Self {
        bytemuck::cast::<[i32; Self::LEN], EvalParams>(params)
    }
}

#[cfg_attr(feature = "eval-tracing", derive(Pod, Zeroable))]
#[derive(Clone, Copy)]
#[repr(C)]
pub struct EvalTrace {
    pub pawn_count: [i32; 2],
    pub knight_count: [i32; 2],
    pub bishop_count: [i32; 2],
    pub rook_count: [i32; 2],
    pub queen_count: [i32; 2],
    // pads to the length of PieceValues
    pub king_count: [i32; 2],

    pub knight_mobility: [[i32; 2]; 9],
    pub knights_behind_pawns: [i32; 2],
    pub knight_king_distance: [[i32; 2]; 4],
    pub knight_outposts: [[i32; 2]; 2],

    pub bishop_mobility: [[i32; 2]; 14],
    pub bishops_behind_pawns: [i32; 2],
    pub bishop_king_distance: [[i32; 2]; 4],
    pub bishop_outposts: [[i32; 2]; 2],
    pub bishop_pair: [i32; 2],
    pub bishop_long_diagonals: [i32; 2],

    pub rook_mobility: [[i32; 2]; 15],
    pub rook_open_files: [[i32; 2]; 2],
    pub rooks_on_seventh: [i32; 2],
    pub rook_trapped: [[i32; 2]; 2],

    pub queen_mobility: [[i32; 2]; 28],
    pub queen_discovery_risks: [i32; 2],

    pub king_mobility: [[i32; 2]; 9],
    pub king_defenders: [[i32; 2]; 12],
    pub king_open_file: [[i32; 2]; 2],
    pub no_enemy_queen: [i32; 2],

    pub passed_pawns: [i32; 2],
    pub double_pawns: [[i32; 2]; 8],
    pub isolated_pawns: [[i32; 2]; 8],
    pub connected_pawn: [[i32; 2]; 8],
    pub phalanx_pawn: [[i32; 2]; 8],

    pub pawn_placement: [[i32; 2]; 64],
    pub knight_placement: [[i32; 2]; 64],
    pub bishop_placement: [[i32; 2]; 64],
    pub rook_placement: [[i32; 2]; 64],
    pub queen_placement: [[i32; 2]; 64],
    pub king_placement: [[i32; 2]; 64],

    pub turn: i32,
}

#[cfg(feature = "eval-tracing")]
impl EvalTrace {
    pub const LEN: usize = std::mem::size_of::<Self>() / std::mem::size_of::<i32>();
    pub fn new() -> Self {
        bytemuck::cast::<[i32; Self::LEN], Self>([0i32; Self::LEN])
    }
    pub fn to_array(&self) -> [i32; Self::LEN] {
        bytemuck::cast::<Self, [i32; Self::LEN]>(*self)
    }
}

#[cfg(feature = "eval-tracing")]
impl Default for EvalTrace {
    fn default() -> Self {
        Self::new()
    }
}

pub const CHECKMATE_SCORE: i32 = 200000;
pub const DRAW_SCORE: i32 = 0;

pub const EVAL_PARAMS: EvalParams = EvalParams {
    piece_values: PieceValues([
        [41, 122],
        [252, 350],
        [274, 337],
        [381, 568],
        [598, 764],
        [20000, 20000],
    ]),
    knight_mobility: [
        [-60, -187],
        [-65, -80],
        [-42, -20],
        [-35, 10],
        [-23, 23],
        [-19, 48],
        [-8, 45],
        [4, 50],
        [19, 34],
    ],
    knight_behind_pawn: [9, 1],
    knight_king_distance: [[-17, 5], [-9, -15], [-17, -5], [-30, -15]],
    knight_outpost: [[-1, -4], [4, 12]],
    bishop_mobility: [
        [-138, -32],
        [-61, -49],
        [-41, -36],
        [-35, -5],
        [-24, 1],
        [-13, 11],
        [-8, 27],
        [-2, 29],
        [-2, 36],
        [3, 30],
        [11, 37],
        [28, 14],
        [13, 16],
        [67, -12],
    ],
    bishop_behind_pawn: [11, 19],
    bishop_king_distance: [[-7, 1], [-14, -2], [-17, 6], [-30, 7]],
    bishop_outpost: [[-11, 1], [2, 2]],
    bishop_pair: [-3, 91],
    bishop_long_diagonal: [2, -4],
    rook_mobility: [
        [45, -151],
        [-112, -42],
        [-74, -4],
        [-71, 26],
        [-69, 27],
        [-67, 36],
        [-65, 47],
        [-61, 48],
        [-57, 52],
        [-53, 59],
        [-47, 65],
        [-48, 69],
        [-43, 64],
        [-42, 63],
        [-55, 75],
    ],
    rook_open_file: [[10, 13], [26, 14]],
    rook_on_seventh: [-11, 0],
    rook_trapped: [[-22, 3], [0, -49]],
    queen_mobility: [
        [-39, -1],
        [-219, -77],
        [-71, -151],
        [-46, -87],
        [-42, -185],
        [-41, -54],
        [-40, -14],
        [-43, 10],
        [-40, 30],
        [-40, 66],
        [-37, 73],
        [-31, 77],
        [-27, 81],
        [-23, 86],
        [-16, 77],
        [-16, 80],
        [-8, 79],
        [-13, 83],
        [-7, 68],
        [-1, 68],
        [1, 35],
        [34, 15],
        [76, -27],
        [49, -11],
        [55, -29],
        [39, -65],
        [44, -12],
        [36, -17],
    ],
    queen_discovery_risk: [-14, 11],
    king_mobility: [
        [-60, 24],
        [-2, -34],
        [-14, 52],
        [-9, 13],
        [16, 4],
        [14, -20],
        [15, -5],
        [-1, 2],
        [18, -17],
    ],
    king_defenders: [
        [-48, 0],
        [-26, 3],
        [0, 0],
        [13, 0],
        [22, 1],
        [30, 0],
        [33, -11],
        [-172, -14],
        [0, 0],
        [0, 0],
        [0, 0],
        [0, 0],
    ],
    king_open_file: [[-22, 17], [-50, -3]],
    no_enemy_queen: [263, 192],
    passed_pawn: [-6, 30],
    double_pawn: [
        [-26, -86],
        [6, -25],
        [-15, -36],
        [-11, -52],
        [-17, -33],
        [-23, -22],
        [27, -41],
        [-16, -57],
    ],
    isolated_pawn: [
        [-9, -15],
        [-8, -3],
        [-16, -20],
        [-11, -18],
        [-25, -21],
        [-10, -16],
        [0, -18],
        [-15, -12],
    ],
    connected_pawn: [
        [1, 1],
        [7, 5],
        [12, 14],
        [5, 23],
        [8, 19],
        [0, 13],
        [13, 0],
        [9, -1],
    ],
    phalanx_pawn: [
        [1, -1],
        [0, 1],
        [0, -3],
        [0, -5],
        [-1, -4],
        [3, -1],
        [-7, 4],
        [0, 0],
    ],
    piece_tables: PieceTables([
        [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [-14, 24],
            [-12, 12],
            [0, 21],
            [15, 32],
            [6, 44],
            [11, 29],
            [13, 8],
            [-2, -7],
            [-29, 25],
            [-21, 19],
            [-23, 15],
            [-2, 13],
            [0, 28],
            [-15, 22],
            [-2, 6],
            [-13, -2],
            [-14, 32],
            [-10, 20],
            [-1, 5],
            [1, 5],
            [2, 9],
            [10, 7],
            [-5, 17],
            [3, 0],
            [-9, 66],
            [-9, 33],
            [-4, 52],
            [5, 22],
            [11, 26],
            [22, 23],
            [11, 35],
            [18, 37],
            [13, 119],
            [2, 92],
            [58, 99],
            [62, 87],
            [59, 79],
            [21, 82],
            [69, 88],
            [39, 76],
            [117, 180],
            [72, 163],
            [111, 206],
            [60, 152],
            [92, 193],
            [28, 160],
            [-37, 192],
            [-4, 195],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0],
        ],
        [
            [-109, 34],
            [-19, -27],
            [-54, -23],
            [-32, -36],
            [-47, -3],
            [-48, -17],
            [-21, -19],
            [-30, 8],
            [-37, -11],
            [-50, 20],
            [-24, -33],
            [-25, -30],
            [-24, -41],
            [-33, -13],
            [-36, -10],
            [-31, -17],
            [-18, -16],
            [-30, -22],
            [-30, -35],
            [-17, -5],
            [-30, -6],
            [-35, -35],
            [-15, -34],
            [-22, -7],
            [4, 7],
            [0, -8],
            [-1, 9],
            [-18, 27],
            [-6, 5],
            [3, -7],
            [26, -32],
            [-1, -12],
            [21, -1],
            [11, -20],
            [25, 7],
            [56, -6],
            [10, 9],
            [37, 6],
            [24, -21],
            [61, 10],
            [-52, 19],
            [11, -19],
            [45, 9],
            [54, -2],
            [95, -19],
            [109, -6],
            [56, -7],
            [71, -37],
            [54, 4],
            [25, -2],
            [65, -16],
            [84, -10],
            [90, -15],
            [99, -39],
            [54, 20],
            [83, 12],
            [-60, 76],
            [-55, 50],
            [-35, -3],
            [87, -32],
            [40, 13],
            [76, -4],
            [45, 9],
            [-24, -87],
        ],
        [
            [23, 14],
            [3, -12],
            [2, 6],
            [-13, -5],
            [-21, 6],
            [-17, -12],
            [-39, 20],
            [12, 22],
            [11, 0],
            [5, -16],
            [1, -8],
            [-20, 10],
            [-12, -3],
            [-5, -3],
            [-6, -4],
            [24, -19],
            [19, 0],
            [3, -1],
            [-17, 16],
            [-7, 2],
            [-15, 29],
            [-25, 3],
            [3, -14],
            [10, -21],
            [21, -5],
            [-14, -3],
            [-2, 9],
            [24, 8],
            [14, 7],
            [-5, 1],
            [2, -8],
            [16, -11],
            [28, -5],
            [19, 1],
            [6, 20],
            [42, 12],
            [18, 19],
            [13, -9],
            [7, 0],
            [12, 2],
            [22, 0],
            [29, 1],
            [40, 0],
            [49, -3],
            [65, -18],
            [88, 10],
            [69, -19],
            [42, 14],
            [21, 2],
            [34, -2],
            [29, -7],
            [41, -18],
            [33, -3],
            [34, -1],
            [11, 23],
            [27, -17],
            [6, 35],
            [-9, 4],
            [22, -5],
            [-158, 45],
            [-144, 27],
            [-79, 21],
            [25, -20],
            [-29, -18],
        ],
        [
            [-48, 24],
            [-47, 13],
            [-39, 20],
            [-31, 5],
            [-16, -13],
            [-17, -5],
            [0, -18],
            [-19, -7],
            [-61, 6],
            [-40, -3],
            [-32, -3],
            [-44, 0],
            [-14, -20],
            [-12, -29],
            [-7, -32],
            [-58, 0],
            [-66, 13],
            [-46, 16],
            [-55, 9],
            [-22, -8],
            [-18, -23],
            [-6, -26],
            [24, -37],
            [-24, 12],
            [-48, 30],
            [-63, 36],
            [-33, 9],
            [-18, 8],
            [-25, 9],
            [-39, 13],
            [49, -24],
            [-23, 17],
            [-39, 45],
            [-22, 35],
            [-20, 43],
            [-3, 23],
            [-7, 25],
            [16, 6],
            [49, 5],
            [-9, 43],
            [-44, 47],
            [-3, 47],
            [-15, 42],
            [-19, 42],
            [37, 10],
            [46, 12],
            [46, 7],
            [11, 41],
            [-18, 42],
            [-12, 49],
            [-6, 52],
            [42, 35],
            [35, 34],
            [18, 31],
            [35, 36],
            [21, 28],
            [0, 24],
            [-79, 66],
            [-4, 25],
            [-39, 50],
            [-31, 35],
            [-3, 37],
            [-30, 42],
            [-20, 49],
        ],
        [
            [-18, -16],
            [-25, -76],
            [-25, -18],
            [-19, -5],
            [-14, -34],
            [-43, -6],
            [72, -122],
            [41, -136],
            [-44, -11],
            [-23, -5],
            [-20, -7],
            [-10, -32],
            [-17, -16],
            [0, -56],
            [6, -50],
            [30, -66],
            [-4, -61],
            [-19, -17],
            [-31, 47],
            [-29, 32],
            [-38, 47],
            [-17, 26],
            [-13, 22],
            [12, -4],
            [-14, 0],
            [-37, 4],
            [-23, 17],
            [-31, 98],
            [-21, 62],
            [-11, 40],
            [4, 11],
            [0, 23],
            [-23, 3],
            [-11, 15],
            [-15, 34],
            [-28, 95],
            [-33, 103],
            [-6, 106],
            [16, 68],
            [9, 45],
            [-11, -9],
            [-20, 36],
            [-1, 34],
            [-35, 88],
            [32, 67],
            [95, 24],
            [56, 36],
            [44, 61],
            [-19, 6],
            [-38, 23],
            [-21, 63],
            [-45, 96],
            [-32, 100],
            [39, 43],
            [32, 15],
            [77, 51],
            [-10, -39],
            [11, -34],
            [25, 6],
            [5, 29],
            [54, 11],
            [189, -80],
            [60, -46],
            [79, -33],
        ],
        [
            [17, -88],
            [-5, -51],
            [-17, -23],
            [-60, -10],
            [-22, -44],
            [-58, -28],
            [1, -55],
            [32, -129],
            [-7, -20],
            [-67, -7],
            [-34, -10],
            [-90, 7],
            [-88, 4],
            [-83, 0],
            [-30, -24],
            [-21, -42],
            [2, -45],
            [-18, 0],
            [-74, 10],
            [-90, 24],
            [-86, 15],
            [-104, 7],
            [-78, -4],
            [-92, -27],
            [0, -18],
            [3, 1],
            [-34, 34],
            [-59, 54],
            [-108, 42],
            [-115, 34],
            [-113, 22],
            [-52, -27],
            [134, -13],
            [44, 24],
            [8, 60],
            [-32, 63],
            [-111, 72],
            [-28, 64],
            [-64, 44],
            [38, -7],
            [127, -10],
            [10, 53],
            [116, 56],
            [44, 58],
            [31, 70],
            [-79, 80],
            [-49, 55],
            [-24, 8],
            [67, -35],
            [139, 23],
            [101, 73],
            [81, 34],
            [-23, 74],
            [-85, 77],
            [-83, 80],
            [-85, 20],
            [143, -155],
            [160, -39],
            [125, 22],
            [59, 39],
            [16, -1],
            [92, -3],
            [164, 21],
            [66, -116],
        ],
    ]),
};
